---
title: "Visualising and Analysing Time-oriented Data"
author: "Sun Yiping"
date: "Febrary 21, 2024"
date-modified: "Febrary 22, 2024"
---

## 1. Learning Outcome

In this hands-on exercise, we will learn how to visualize time oriented data in R.

## 2. Getting Started

### 2.1 Installing and loading the required libraries

Firstly, let's install and load the required packages:

-   [tidyverse](https://www.tidyverse.org/): an opinionated collection of R packages designed for data import, data wrangling and data exploration

-   [treemap](https://cran.r-project.org/web/packages/treemap/index.html): offers great flexibility to draw treemaps.

-   [treemapify](https://cran.r-project.org/web/packages/treemapify/index.html): a ggplot2 extension to draw treemaps.

```{r}
pacman::p_load(tidyverse, scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot)

```

### 2.2 Importing the data

In this exercise, *eventlog.csv* file will be used. This data file contains 199,999 records of cyber attacks arranged by time and by country.

Let's start by importing the data.

```{r}
attacks <- read_csv("../../Data/eventlog.csv")

```

### 2.3 Examing the data structure

In this section, we'll use *kable()* to review the structure of the data.

```{r}
kable(head(attacks))

```
There data frame contains three columns:

-   **timestamp**: stores date-time values in POSIXct format.
-   **source_country**: stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.
-   **tz**: stores time zone of the source IP address.

### 2.4 Preparing the data

Step 1: Deriving two new columns from the **timestamp** variable

-   **wkday**: the day of the week when the attack happend
-   **hour**: the hour when the attack happened

```{r}
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }

```

Step 2: Deriving the attacks tibble data frame

```{r}
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))

```
Check the resulting data frame.

```{r}
kable(head(attacks))

```

## 3. Building the Calendar Heatmaps

### 3.1 Single calendar heatmaps

We use the code chunk below to build the calendar hearmap.

```{r}
grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )

```

### 3.2 Multiple calendar heatmaps

In the previous section, we made a heatmap to review the patterns of the attacks for the entire data frame.

We can also plot the heatmaps by country to reveal the patterns within the countries.

Step 1: Deriving attack by country object

We first calculate the percentage of attacks by country.

```{r}
attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))

```

Step 2: Preparing the tidy data frame

We'll plot the heatmaps for four countries with the most attacks. Hence, let's create a subset of the main data frame that only contains the records from top 4 countries.

```{r}
top4 <- attacks_by_country$source_country[1:4]

top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()

```

Step 3: Plotting the Multiple Calender Heatmap by using ggplot2 package

```{r}
ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )

```

## 4. Plotting Cycle Plot

In this section, we will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.

### 4.1 Importing the data

We'll use *arrivals_by_air.xlsx* file for this section.

Let's first import the data.

```{r}
air <- read_excel("../../Data/arrivals_by_air.xlsx")

```

The data file contains 240 rows and 36 columns

### 4.2 Preparing the data

Since we are going to plot the cycle graph by month and by year, we'll need to create these two columns from **Month-Year** column.

```{r}
air$month <- factor(month(air$`Month-Year`), 
                    levels = 1:12, 
                    labels = month.abb, 
                    ordered = TRUE) 
air$year <- year(ymd(air$`Month-Year`))

```

Next we'll filter the dataset by country = Vietnam, for example.

```{r}
Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)

```

We use the code chunk below to compute the year average arrivals by month which serves as a reference line in the cycle plot later.

```{r}
hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))

```

### Plotting cycle plot

We are now ready to make the plot.

```{r}
ggplot() + 
  geom_line(data = Vietnam,
            aes(x = year, 
                y = `Vietnam`, 
                group = month), 
            colour = "black") +
  geom_hline(aes(yintercept = avgvalue), 
             data = hline.data, 
             linetype = 6, 
             colour = "red", 
             size = 0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")

```

## 5. Plotting Slopegraph

In this section we will learn how to plot a slopegraph using R.

### 5.1 Installing R packages

Firstly, we need to load a new package called *CGPfunctions* into R.

```{r}
pacman::p_load(CGPfunctions)

```

### 5.2 Importing the data

We'll use *rice.csv* file in this section.

```{r}
rice <- read_csv("../../Data/rice.csv")

```
The data set contains 550 rows and 4 columns.

### 5.3 Plotting the slopegraph

Next, let's make the plot.

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "Originally prepared by: Dr. Kam Tin Seong")

```

This comes to the end of this hands-on exercise. I have learned to make static and interactive treemaps plots in R. Hope you enjoyed it, too!

See you in the next hands-on exercisese ðŸ¥°










