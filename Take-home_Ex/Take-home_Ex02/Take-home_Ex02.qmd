---
title: "Data Vis Makeover"
author: "Sun Yiping"
date: "January 28, 2024"
date-modified: "January 28, 2024"
execute: 
  warning: false
---

## 1. Setting the Scene

### 1.1 Background

This is the **take home exercise 2 of ISSS608 Visual Analytics and Applications**. In this exercise, we are instructed to refer to the take home exercise 1 of one of our fellow classmates, and discuss his / her visualizations in terms of clarity and aesthetics.

### 1.2 Choose the reference work

The discussions in this take home exercise is based on [this work](https://isss608cjh.netlify.app/take-home_ex/take-home_ex01/take-home_ex01).

## 2. Data Preparation

### 2.1 Installing and loading the required libraries

The chunk below is used to install and load the R packages that were used by the original author.

```{r}
pacman::p_load(tidyverse, haven, dplyr, plotly, ggrepel, patchwork, 
               ggthemes, hrbrthemes, jpeg, ggiraph, ggdist)

```

### 2.2 Import the data

The data used for our take home exercise 1 is a survey data from PISA, which measures 15-year-olds' ability to use their reading, mathematics and science knowledge and skills to meet real-life challenges. If you'd like to find out more about the dataset, you may refer to [my take home exercise 1](https://isss608-mitbsunyp.netlify.app/take-home_ex/take-home_ex01/take-home_ex01).

Let's first import the dataset.

```{r}
stu_qqq_sg <- read_rds("../../Data/stu_qqq_sg.rds")

```

Next, we'll follow the code provided by the original author to make a subset of the data, and compute the average plausible values for mathematics, reading and science.

```{r}
# Create a new dataset PV by extracting relevant variables from stu_qqq_sg
PV <- stu_qqq_sg %>%
  mutate(
    Math_Score = rowMeans(select(., starts_with("PV1MATH"), starts_with("PV2MATH"), starts_with("PV3MATH"), starts_with("PV4MATH"), starts_with("PV5MATH"), starts_with("PV6MATH"), starts_with("PV7MATH"), starts_with("PV8MATH"), starts_with("PV9MATH"), starts_with("PV10MATH")), na.rm = TRUE),
    Reading_Score = rowMeans(select(., starts_with("PV1READ"), starts_with("PV2READ"), starts_with("PV3READ"), starts_with("PV4READ"), starts_with("PV5READ"), starts_with("PV6READ"), starts_with("PV7READ"), starts_with("PV8READ"), starts_with("PV9READ"), starts_with("PV10READ")), na.rm = TRUE),
    Science_Score = rowMeans(select(., starts_with("PV1SCIE"), starts_with("PV2SCIE"), starts_with("PV3SCIE"), starts_with("PV4SCIE"), starts_with("PV5SCIE"), starts_with("PV6SCIE"), starts_with("PV7SCIE"), starts_with("PV8SCIE"), starts_with("PV9SCIE"), starts_with("PV10SCIE")), na.rm = TRUE),
    Total_Score = Math_Score + Reading_Score + Science_Score,
    Gender = ifelse(ST004D01T == 1,  "Female", "Male"),
    Own_Room = ifelse(ST250Q01JA == 1, "Yes" , "No"),
    mi_num = ST251Q06JA
  ) %>%
  select(CNTSCHID, CNTSTUID, Math_Score, Reading_Score, Science_Score, Total_Score, Gender, Own_Room, mi_num)

```

As described by the original author, we use the code chunk below to convert school ID and student ID to string variables. We'll also clear the missing values in the new dataset.

```{r}
# Convert numerical variables to string variables
PV$CNTSCHID <- as.character(PV$CNTSCHID)
PV$CNTSTUID <- as.character(PV$CNTSTUID)

# Clear missing values
PV <- na.omit(PV)

```

## 3. Visualization Discussion and Remake

### 3.1 Distribution of Student Performance

**Original plot**

![](images/clipboard-2656178259.png)

**What's good about this plot?**

The original author chose the right type of graph to view the distribution of the subjects, which is the histograms. It is easy for us to see if the data exhibits any abnormal patterns, for example, skewness or multi-model distribution.

**What can be improved?**

-   It isn't very obvious to identify the plots for each subject as they are all in the same color. My suggestion is to use different colors to represent different subjects.

-   The scales could be aligned across all the charts so to avoid mis-interpretation when comparing the mean scores among the three subjects.

-   Density curves could be added to show the smoothness of the curves.

-   The plots could be better arranged to show the relationship among individual subjects and the total scores.

**A remake of the plot**

::: panel-tabset
## The plot

```{r}
#| echo: false

plot1 <- ggplot(data = PV, aes(x = Math_Score, y = after_stat(density))) +
  geom_histogram(bins = 10, boundary = 100, color = "chartreuse3", fill = "lightgreen") +
  geom_density(lwd = 0.8, colour = "darkgreen") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(100, 900)) +
  ggtitle("Distribution of Maths Scores")+
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))
  
plot2 <- ggplot(data = PV, aes(x = Reading_Score, y = after_stat(density))) +
  geom_histogram(bins = 10, boundary = 100, color = "blue", fill = "lightblue") +
  geom_density(lwd = 0.8, colour = "darkblue") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(100, 900)) +
  ggtitle("Distribution of Reading Scores")+
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot3 <- ggplot(data = PV, aes(x = Science_Score, y = after_stat(density))) +
  geom_histogram(bins = 10, boundary = 100, color = "red", fill = "pink") +
  geom_density(lwd = 0.8, colour = "darkred") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(100, 900)) +
  ggtitle("Distribution of Science Scores")+
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot4 <- ggplot(data = PV, aes(x = Total_Score, y = after_stat(density))) +
  geom_histogram(bins = 10, boundary = 100, color = "gray25", fill = "gray95") +
  geom_density(lwd = 0.8, colour = "gray10") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(200, 2600)) +
  ggtitle("Distribution of Total Scores")+
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

(plot1 / plot2 / plot3) | plot4

```

## The code

```{r}
#| eval: false

plot1 <- ggplot(data = PV, aes(x = Math_Score, y = after_stat(density))) +
  geom_histogram(bins = 10, boundary = 100, color = "chartreuse3", fill = "lightgreen") +
  geom_density(lwd = 0.8, colour = "darkgreen") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(100, 900)) +
  ggtitle("Distribution of Maths Scores")+
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))
  
plot2 <- ggplot(data = PV, aes(x = Reading_Score, y = after_stat(density))) +
  geom_histogram(bins = 10, boundary = 100, color = "blue", fill = "lightblue") +
  geom_density(lwd = 0.8, colour = "darkblue") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(100, 900)) +
  ggtitle("Distribution of Reading Scores")+
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot3 <- ggplot(data = PV, aes(x = Science_Score, y = after_stat(density))) +
  geom_histogram(bins = 10, boundary = 100, color = "red", fill = "pink") +
  geom_density(lwd = 0.8, colour = "darkred") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(100, 900)) +
  ggtitle("Distribution of Science Scores")+
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot4 <- ggplot(data = PV, aes(x = Total_Score, y = after_stat(density))) +
  geom_histogram(bins = 10, boundary = 100, color = "gray25", fill = "gray95") +
  geom_density(lwd = 0.8, colour = "gray10") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(200, 2600)) +
  ggtitle("Distribution of Total Scores")+
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

(plot1 / plot2 / plot3) | plot4

```
:::

### 3.2 Student Performance by Gender

**Original plot**

![](images/clipboard-4228929711.png)

**What's good about this plot?**

While comparing the distribution between genders, the author used different colors so it's easy to differentiate the distributions for female students and male students.

**What can be improved?**

-   Although there are supposed to be two colors to represent female students and male students, it seems to be three categories when we first look at the graph because a third color is created at the area where the two distributions overlap. I'd suggest to use density curves without filling color.

-   Since we need to use different colors to represent different categories, we can't use colors to differentiate the subjects as we did in the previous section. An alternative way is to display an icon in the plots so the audience can easily identify the subjects.

**A remake of the plot**

::: panel-tabset
## The plot

```{r}
#| echo: false

# Maths: Plot the density curves by gender with maths image
img_maths <- readJPEG("images/Maths.jpg", native = TRUE)

plot1 <- ggplot(data = PV, aes(x = Math_Score, color = Gender)) +
  geom_density(alpha = 0.7, position = "identity", stat = "density",lwd = 0.8) +  
  labs(title = "Math Scores by Gender") +
  theme(legend.position = "none") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(100, 900)) +
  theme_minimal() +
  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))

plot1_img <- plot1 +
  inset_element(p = img_maths,
                 left = 0.1,
                 bottom = 0.7,
                 right = 0.3,
                 top = 0.9)

# Reading: Plot the density curves by gender with reading image
img_read <- readJPEG("images/Reading.jpg", native = TRUE)

plot2 <- ggplot(data = PV, aes(x = Reading_Score, color = Gender)) +
  geom_density(alpha = 0.7, position = "identity", stat = "Density", lwd = 0.8) +
  labs(title = "Reading Scores by Gender") +
  theme(legend.position = "none") +
  scale_y_continuous(labels = scales::percent)+
  coord_cartesian(xlim = c(100, 900)) +
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot2_img <- plot2 +
  inset_element(p = img_read,
                 left = 0.1,
                 bottom = 0.7,
                 right = 0.3,
                 top = 0.9)

# English: Plot the density curves by gender with English image
img_science <- readJPEG("images/Science.jpg", native = TRUE)

plot3 <- ggplot(data = PV, aes(x = Science_Score, color = Gender)) +
  geom_density(alpha = 0.7, position = "identity", stat = "Density", lwd = 0.8) +
  labs(title = "Science Scores by Gender") +
  theme(legend.position = "none") +
  scale_y_continuous(labels = scales::percent)+
  coord_cartesian(xlim = c(100, 900)) +
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot3_img <- plot3 +
  inset_element(p = img_science,
                 left = 0.1,
                 bottom = 0.7,
                 right = 0.3,
                 top = 0.9)

# Total: Plot the density curves by gender with total image
img_total <- readJPEG("images/Total.jpg", native = TRUE)

plot4 <- ggplot(data = PV, aes(x = Total_Score, color = Gender)) +
  geom_density(alpha = 0.7, position = "identity", stat = "density", lwd = 0.8) +
  labs(title = "Total Scores by Gender") + 
  scale_y_continuous(labels = scales::percent)+
  coord_cartesian(xlim = c(200, 2600)) +
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot4_img <- plot4 +
  inset_element(p = img_total,
                 left = 0.1,
                 bottom = 0.7,
                 right = 0.3,
                 top = 0.9)

plot1_img + plot2_img + plot3_img + plot4_img

```

## The code

```{r}
#| eval: false

# Maths: Plot the density curves by gender with maths image
img_maths <- readJPEG("images/Maths.jpg", native = TRUE)

plot1 <- ggplot(data = PV, aes(x = Math_Score, color = Gender)) +
  geom_density(alpha = 0.7, position = "identity", stat = "density",lwd = 0.8) +  
  labs(title = "Math Scores by Gender") +
  theme(legend.position = "none") +
  scale_y_continuous(labels = scales::percent) +
  coord_cartesian(xlim = c(100, 900)) +
  theme_minimal() +
  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))

plot1_img <- plot1 +
  inset_element(p = img_maths,
                 left = 0.1,
                 bottom = 0.7,
                 right = 0.3,
                 top = 0.9)

# Reading: Plot the density curves by gender with reading image
img_read <- readJPEG("images/Reading.jpg", native = TRUE)

plot2 <- ggplot(data = PV, aes(x = Reading_Score, color = Gender)) +
  geom_density(alpha = 0.7, position = "identity", stat = "Density", lwd = 0.8) +
  labs(title = "Reading Scores by Gender") +
  theme(legend.position = "none") +
  scale_y_continuous(labels = scales::percent)+
  coord_cartesian(xlim = c(100, 900)) +
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot2_img <- plot2 +
  inset_element(p = img_read,
                 left = 0.1,
                 bottom = 0.7,
                 right = 0.3,
                 top = 0.9)

# English: Plot the density curves by gender with English image
img_science <- readJPEG("images/Science.jpg", native = TRUE)

plot3 <- ggplot(data = PV, aes(x = Science_Score, color = Gender)) +
  geom_density(alpha = 0.7, position = "identity", stat = "Density", lwd = 0.8) +
  labs(title = "Science Scores by Gender") +
  theme(legend.position = "none") +
  scale_y_continuous(labels = scales::percent)+
  coord_cartesian(xlim = c(100, 900)) +
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot3_img <- plot3 +
  inset_element(p = img_science,
                 left = 0.1,
                 bottom = 0.7,
                 right = 0.3,
                 top = 0.9)

# Total: Plot the density curves by gender with total image
img_total <- readJPEG("images/Total.jpg", native = TRUE)

plot4 <- ggplot(data = PV, aes(x = Total_Score, color = Gender)) +
  geom_density(alpha = 0.7, position = "identity", stat = "density", lwd = 0.8) +
  labs(title = "Total Scores by Gender") + 
  scale_y_continuous(labels = scales::percent)+
  coord_cartesian(xlim = c(200, 2600)) +
  theme_minimal() +
  theme(text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5))

plot4_img <- plot4 +
  inset_element(p = img_total,
                 left = 0.1,
                 bottom = 0.7,
                 right = 0.3,
                 top = 0.9)

plot1_img + plot2_img + plot3_img + plot4_img

```
:::

### 3.3 Student Performance by School

**Original plot**

![](images/clipboard-4209240081.png)

**What's good about this plot?**

Boxplot is one of the ways to view the distribution of the performance across schools. The author also showed school IDs of the outliers to help identify if any schools performed well or bad for each of the subjects.

**What can be improved?**

-   Static boxplot has its limitations when the audience try to draw a story across different subjects, for example, if there is any schools that performed consistently good or bad across all the subjects.

-   I'd also suggest to use different color to represent different subjects for easy identification.

-   Therefore, a coordinated interactive graph would allow the audience to easily see the performance of a selected school across subjects. In my makeover below, I'll choose dot plot to represent the data as it's easier for me to see the schools' performance across subjects.

**A remake of the plot**

We'll first follow the author's code chunk to calculate the average scores for each school for each subject.

```{r}
School_Avg_Scores <- PV %>%
  group_by(CNTSCHID) %>%
  summarize(
    Avg_Math_Score = mean(Math_Score, na.rm = TRUE),
    Avg_Reading_Score = mean(Reading_Score, na.rm = TRUE),
    Avg_Science_Score = mean(Science_Score, na.rm = TRUE),
    Avg_Score = mean(Total_Score/3, na.rm = TRUE)
  )

School_Avg_Scores_subjects <- School_Avg_Scores %>%
  select(CNTSCHID, starts_with("Avg_Math"), starts_with("Avg_Reading"), starts_with("Avg_Science"),starts_with("Avg_Score"))

School_Avg_Scores_long <- School_Avg_Scores_subjects %>%
  pivot_longer(cols = -CNTSCHID, names_to = "Subject", values_to = "Score")

```

Now let's remake the plot.

::: panel-tabset
## The plot

```{r}
#| echo: false

# Create dot plot for Maths
School_Avg_Scores$tooltip_maths <- c(paste0(
  "School ID = ", School_Avg_Scores$CNTSCHID,
  "\n Ave Maths Score = ", School_Avg_Scores$Avg_Math_Score
))

plot1 <- ggplot(data = School_Avg_Scores,
            aes(x = Avg_Math_Score)) +
  geom_dotplot_interactive(
    aes(data_id = CNTSCHID, tooltip = tooltip_maths), # to display ID when mouse over the dots in the graph
    stackgroups = TRUE,
    binwidth = 1,
    dotsize = 8,
    color = "darkgreen",
    fill = "chartreuse3",
    method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

# Create dot plot for Reading
School_Avg_Scores$tooltip_read <- c(paste0(
  "School ID = ", School_Avg_Scores$CNTSCHID,
  "\n Ave Reading Score = ", School_Avg_Scores$Avg_Reading_Score
))

plot2 <- ggplot(data = School_Avg_Scores,
            aes(x = Avg_Reading_Score)) +
  geom_dotplot_interactive(
    aes(data_id = CNTSCHID, tooltip = tooltip_read), # to display ID when mouse over the dots in the graph
    stackgroups = TRUE,
    binwidth = 1,
    dotsize = 8,
    color = "blue",
    fill = "lightblue",
    method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

# Create dot plot for Science
School_Avg_Scores$tooltip_science <- c(paste0(
  "School ID = ", School_Avg_Scores$CNTSCHID,
  "\n Ave Science Score = ", School_Avg_Scores$Avg_Science_Score
))

plot3 <- ggplot(data = School_Avg_Scores,
            aes(x = Avg_Science_Score)) +
  geom_dotplot_interactive(
    aes(data_id = CNTSCHID, tooltip = tooltip_science), # to display ID when mouse over the dots in the graph
    stackgroups = TRUE,
    binwidth = 1,
    dotsize = 8,
    color = "red",
    fill = "pink",
    method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

# Combine the three plots
girafe(
  code = print(plot1 + plot2 + plot3),
  width_svg = 6,
  height_svg = 3,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )
)

```

## The code

```{r}
#| eval: false

# Create dot plot for Maths
School_Avg_Scores$tooltip_maths <- c(paste0(
  "School ID = ", School_Avg_Scores$CNTSCHID,
  "\n Ave Maths Score = ", School_Avg_Scores$Avg_Math_Score
))

plot1 <- ggplot(data = School_Avg_Scores,
            aes(x = Avg_Math_Score)) +
  geom_dotplot_interactive(
    aes(data_id = CNTSCHID, tooltip = tooltip_maths), # to display ID when mouse over the dots in the graph
    stackgroups = TRUE,
    binwidth = 1,
    dotsize = 8,
    color = "darkgreen",
    fill = "chartreuse3",
    method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

# Create dot plot for Reading
School_Avg_Scores$tooltip_read <- c(paste0(
  "School ID = ", School_Avg_Scores$CNTSCHID,
  "\n Ave Maths Score = ", School_Avg_Scores$Avg_Reading_Score
))

plot2 <- ggplot(data = School_Avg_Scores,
            aes(x = Avg_Reading_Score)) +
  geom_dotplot_interactive(
    aes(data_id = CNTSCHID, tooltip = tooltip_read), # to display ID when mouse over the dots in the graph
    stackgroups = TRUE,
    binwidth = 1,
    dotsize = 8,
    color = "blue",
    fill = "lightblue",
    method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

# Create dot plot for Science
School_Avg_Scores$tooltip_science <- c(paste0(
  "School ID = ", School_Avg_Scores$CNTSCHID,
  "\n Ave Maths Score = ", School_Avg_Scores$Avg_Science_Score
))

plot3 <- ggplot(data = School_Avg_Scores,
            aes(x = Avg_Science_Score)) +
  geom_dotplot_interactive(
    aes(data_id = CNTSCHID, tooltip = tooltip_science), # to display ID when mouse over the dots in the graph
    stackgroups = TRUE,
    binwidth = 1,
    dotsize = 8,
    color = "red",
    fill = "pink",
    method = "histodot") +
  scale_y_continuous(NULL, breaks = NULL)

# Combine the three plots
girafe(
  code = print(plot1 + plot2 + plot3),
  width_svg = 6,
  height_svg = 3,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )
)

```
:::

### 3.4 Student Performance by Musical Instruments

**Original plot**

![](images/clipboard-630224302.png)

**What's good about this plot?**

The intention was good where the author explored the correlation between the performance of the three subjects and the number of musical instruments owned. However, I don't think scatter plot is suitable for this purpose.

**What can be improved?**

-   The number of musical instruments owned are in integer form, where as the scores of the subjects are in continuous form. This leads to the data points are displayed on the vertical line which is hard for any interpretation.

-   Although the author displayed a best fit line in the graphs to show the trend, it's hard to correlate the trend line to the dots.

-   I'd suggest to use one of the following visualizations to represent the data: boxplot, violin plot, or rain cloud plots.

**A remake of the plot**

::: panel-tabset
## The plot

```{r}
#| echo: false

PV$mi_num_s <- as.character(PV$mi_num)

plot1 <- ggplot(PV,
       aes(x = mi_num_s,
           y = Math_Score)) +
  xlab("Number of Musical Instruments") +
  stat_halfeye(position = "dodge",
               width = 0.5,
               adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               slab_color = "chartreuse3",
               slab_fill = "lightgreen") +
  geom_boxplot(width = 0.20,
               outlier.shape = NA,
               color = "darkgreen") +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip() +
  ggtitle("Math Score by Musical instruments") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot2 <- ggplot(PV,
       aes(x = mi_num_s,
           y = Reading_Score)) +
  xlab("Number of Musical Instruments") +
  stat_halfeye(position = "dodge",
               width = 0.5,
               adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               slab_color = "blue",
               slab_fill = "lightblue") +
  geom_boxplot(width = 0.20,
               outlier.shape = NA,
               color = "darkblue") +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip() +
  ggtitle("Reading Score by Musical instruments") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot3 <- ggplot(PV,
       aes(x = mi_num_s,
           y = Science_Score)) +
  xlab("Number of Musical Instruments") +
  stat_halfeye(position = "dodge",
               width = 0.5,
               adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               slab_color = "red",
               slab_fill = "pink") +
  geom_boxplot(width = 0.20,
               outlier.shape = NA,
               color = "darkred") +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip() +
  ggtitle("Science Score by Musical instruments") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot4 <- ggplot(PV,
       aes(x = mi_num_s,
           y = Total_Score)) +
  xlab("Number of Musical Instruments") +
  stat_halfeye(position = "dodge",
               width = 0.5,
               adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               slab_color = "gray25",
               slab_fill = "gray95") +
  geom_boxplot(width = 0.20,
               outlier.shape = NA,
               color = "gray10") +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip() +
  ggtitle("Total Score by Musical instruments") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot1 + plot2 + plot3 + plot4

```

## The code

```{r}
#| eval: false

PV$mi_num_s <- as.character(PV$mi_num)

plot1 <- ggplot(PV,
       aes(x = mi_num_s,
           y = Math_Score)) +
  xlab("Number of Musical Instruments") +
  stat_halfeye(position = "dodge",
               width = 0.5,
               adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               slab_color = "chartreuse3",
               slab_fill = "lightgreen") +
  geom_boxplot(width = 0.20,
               outlier.shape = NA,
               color = "darkgreen") +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip() +
  ggtitle("Math Score by Musical instruments") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot2 <- ggplot(PV,
       aes(x = mi_num_s,
           y = Reading_Score)) +
  xlab("Number of Musical Instruments") +
  stat_halfeye(position = "dodge",
               width = 0.5,
               adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               slab_color = "blue",
               slab_fill = "lightblue") +
  geom_boxplot(width = 0.20,
               outlier.shape = NA,
               color = "darkblue") +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip() +
  ggtitle("Reading Score by Musical instruments") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot3 <- ggplot(PV,
       aes(x = mi_num_s,
           y = Science_Score)) +
  xlab("Number of Musical Instruments") +
  stat_halfeye(position = "dodge",
               width = 0.5,
               adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               slab_color = "red",
               slab_fill = "pink") +
  geom_boxplot(width = 0.20,
               outlier.shape = NA,
               color = "darkred") +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip() +
  ggtitle("Science Score by Musical instruments") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot4 <- ggplot(PV,
       aes(x = mi_num_s,
           y = Total_Score)) +
  xlab("Number of Musical Instruments") +
  stat_halfeye(position = "dodge",
               width = 0.5,
               adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               slab_color = "gray25",
               slab_fill = "gray95") +
  geom_boxplot(width = 0.20,
               outlier.shape = NA,
               color = "gray10") +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip() +
  ggtitle("Total Score by Musical instruments") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot1 + plot2 + plot3 + plot4

```
:::

### 3.5 Student Performance by Own Room

**Original plot**

![](images/clipboard-594276490.png)

**What's good about this plot?**

Box plot is a good choice to compare if there is any differences in the scores between the students who have their own room and those who share room.

**What can be improved?**

-   Everything is in the same color makes it difficult for the audience to differentiate the plots between subjects and categories.

-   The axis values are not synchronized to make cross reference among the subjects.

-   Since this is a visualization course, maybe we can try something else.

**A remake of the plot**

::: panel-tabset
## The plot

```{r}
#| echo: false

plot1 <- ggplot(PV,
       aes(x = Own_Room,
           y = Math_Score)) +
  geom_violin(color = "chartreuse3",
              fill = "lightgreen") +
  geom_boxplot(width = 0.1, 
               color = "darkgreen",
               alpha = 0.2, 
               outlier.shape = NA) +
  theme_minimal() +
  ggtitle("Math Score by Private Space") +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))
  
plot2 <- ggplot(PV,
       aes(x = Own_Room,
           y = Reading_Score)) +
  geom_violin(color = "blue",
              fill = "lightblue") +
  geom_boxplot(width = 0.1, 
               color = "darkblue",
               alpha = 0.2, 
               outlier.shape = NA) +
  theme_minimal() +
  ggtitle("Reading Score by Private Space") +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot3 <- ggplot(PV,
       aes(x = Own_Room,
           y = Science_Score)) +
  geom_violin(color = "red",
              fill = "pink") +
  geom_boxplot(width = 0.1, 
               color = "darkred",
               alpha = 0.2, 
               outlier.shape = NA) +
  theme_minimal() +
  ggtitle("Science Score by Private Space") +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot4 <- ggplot(PV,
       aes(x = Own_Room,
           y = Total_Score)) +
  geom_violin(color = "gray25",
              fill = "gray95") +
  geom_boxplot(width = 0.1, 
               color = "gray10",
               alpha = 0.2, 
               outlier.shape = NA) +
  theme_minimal() +
  ggtitle("Total Score by Private Space") +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot1 + plot2 + plot3 + plot4

```

## The code

```{r}
#| eval: false

plot1 <- ggplot(PV,
       aes(x = Own_Room,
           y = Math_Score)) +
  geom_violin(color = "chartreuse3",
              fill = "lightgreen") +
  geom_boxplot(width = 0.1, 
               color = "darkgreen",
               alpha = 0.2, 
               outlier.shape = NA) +
  theme_minimal() +
  ggtitle("Math Score by Private Space") +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))
  
plot2 <- ggplot(PV,
       aes(x = Own_Room,
           y = Reading_Score)) +
  geom_violin(color = "blue",
              fill = "lightblue") +
  geom_boxplot(width = 0.1, 
               color = "darkblue",
               alpha = 0.2, 
               outlier.shape = NA) +
  theme_minimal() +
  ggtitle("Reading Score by Private Space") +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot3 <- ggplot(PV,
       aes(x = Own_Room,
           y = Science_Score)) +
  geom_violin(color = "red",
              fill = "pink") +
  geom_boxplot(width = 0.1, 
               color = "darkred",
               alpha = 0.2, 
               outlier.shape = NA) +
  theme_minimal() +
  ggtitle("Science Score by Private Space") +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot4 <- ggplot(PV,
       aes(x = Own_Room,
           y = Total_Score)) +
  geom_violin(color = "gray25",
              fill = "gray95") +
  geom_boxplot(width = 0.1, 
               color = "gray10",
               alpha = 0.2, 
               outlier.shape = NA) +
  theme_minimal() +
  ggtitle("Total Score by Private Space") +
  theme(plot.title = element_text(size = 8, hjust = 0.5),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 8))

plot1 + plot2 + plot3 + plot4

```
:::

This comes to the end of my take-home exercise 2. Hope you enjoyed reading my work. See you in the next take-home exercise 🥰
