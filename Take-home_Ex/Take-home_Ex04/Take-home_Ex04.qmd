---
title: "Prototyping Modules for Visual Analytics Shiny Application"
author: "Sun Yiping"
date: "March 6, 2024"
date-modified: "last-modified"
execute: 
  warning: false
---



```{r}
pacman::p_load(tidyverse, lubridate, caret)

```

```{r}
dengue <- read_csv("../../Data/weekly_dengue_cases.csv")

weather <- read_csv("../../Data/clean_climate_data.csv", na = ".")

```

```{r}
weather_group <- weather %>%
  group_by(Year, Month, Day) %>%
  summarise(avg_daily_rainfall = mean(daily_rainfall, na.rm = TRUE),
            max_highest_30m_rainfall = max(highest_30m_rainfall, na.rm = TRUE),
            max_highest_60m_rainfall = max(highest_60m_rainfall, na.rm = TRUE),
            max_highest_120m_rainfall = max(highest_120m_rainfall, na.rm = TRUE),
            avg_mean_temp = mean(mean_temp, na.rm = TRUE),
            max_max_temp = max(max_temp, na.rm = TRUE),
            min_min_temp = min(min_temp, na.rm = TRUE),
            avg_mean_wind = mean(mean_wind, na.rm = TRUE),
            max_max_wind = max(max_wind, na.rm = TRUE))

```

```{r}
weather_group <- weather_group %>%
  mutate('date' = make_date(year = Year, month = Month, day = Day)) %>%
  mutate('wk_no' = isoweek(ymd(date)))

```


```{r}
weather_group_wk <- weather_group %>%
  group_by(Year, wk_no) %>%
  summarise(avg_daily_rainfall = mean(avg_daily_rainfall, na.rm = TRUE),
            tot_daily_rainfall = sum(avg_daily_rainfall, na.rm = TRUE),
            max_highest_30m_rainfall = max(max_highest_30m_rainfall, na.rm = TRUE),
            max_highest_60m_rainfall = max(max_highest_60m_rainfall, na.rm = TRUE),
            max_highest_120m_rainfall = max(max_highest_120m_rainfall, na.rm = TRUE),
            avg_mean_temp = mean(avg_mean_temp, na.rm = TRUE),
            max_max_temp = max(max_max_temp, na.rm = TRUE),
            min_min_temp = min(min_min_temp, na.rm = TRUE),
            avg_mean_wind = mean(avg_mean_wind, na.rm = TRUE),
            max_max_wind = max(max_max_wind, na.rm = TRUE))

```

```{r}
dengue_weather_wk <- dengue %>%
  left_join(weather_group_wk, by = join_by(Year == Year, WkNo == wk_no))

```

```{r}
# Remove the records with NA

dengue_weather_wk <- dengue_weather_wk[complete.cases(dengue_weather_wk),]

summary(dengue_weather_wk)

```

```{r}
# Fit linear regression model using all the data without normalization

model_lm1 <- lm(Cases ~ tot_daily_rainfall + avg_mean_temp + avg_mean_wind, data = dengue_weather_wk)

summary(model_lm1)

```

```{r}
plot(model_lm1$residuals, pch = 16, col = "blue")

```

```{r}
# Fit linear regression model using all the data with log transformation on X

model_lm2 <- lm(Cases ~ log1p(tot_daily_rainfall) + log1p(avg_mean_temp) + log1p(avg_mean_wind), data = dengue_weather_wk)

summary(model_lm2)

```

```{r}
plot(model_lm2$residuals, pch = 16, col = "blue")

```

```{r}
# Fit linear regression model using all the data with log transformation on X and Y

model_lm3 <- lm(log1p(Cases) ~ log1p(tot_daily_rainfall) + log1p(avg_mean_temp) + log1p(avg_mean_wind), data = dengue_weather_wk)

summary(model_lm3)

```

```{r}
model_lm3.1 <- lm(log1p(Cases) ~ log1p(avg_mean_temp) + log1p(avg_mean_wind), data = dengue_weather_wk)

summary(model_lm3.1)

```

```{r}
model_lm3.2 <- lm(log1p(Cases) ~ log1p(avg_mean_temp), data = dengue_weather_wk)

summary(model_lm3.2)

```

```{r}
plot(model_lm3.2$residuals, pch = 16, col = "blue")

```

```{r}
# Fit linear regression model using all the data with min-max transformation on X

minmax_process <- preProcess(dengue_weather_wk, method = c("range"))

dengue_weather_wk_mm <- predict(minmax_process, dengue_weather_wk)

```

















