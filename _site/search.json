[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Creating data visualisation beyond default",
    "section": "",
    "text": "This is the take home exercise 1 of ISSS608 Visual Analytics and Applications. In this exercise, we are instructed to analyze a survey data to understand:\n\nthe distribution of Singapore students’ performance in mathematics, reading and science\nthe relationship between these performance with schools, gender and socioeconomic status of the students\n\nDespite the continuous effort from Ministry of Education in Singapore to promote the concept of “Every school a good school”, and all the student should be treated the same regardless of their background. People are still not convinced that the neighborhood schools are comparable with the elite schools.\nTherefore, we’d use the survey data from 2022 Programme for International Student Assessment (PISA) to get some insights into what differentiate the students’ academic performance.\n\n\n\nPISA is a programme from Organization for Economic Co-operation and Development (OECD). It measures 15-year-olds’ ability to use their reading, mathematics and science knowledge and skills to meet real-life challenges, and it’s conducted every three years. The last assessment was conducted in 2022, and the data was made publicly available on PISA’s website.\nIn this exercise, we’d focus on the Student Questionnaire data, and analyze the responses from the participants from Singapore. The full questionnaire could be found with this link.\n\n\n\nAnalyze the responses from Singapore participants, and understand:\n\nthe distribution of Singapore students’ performance in mathematics, reading and science\nthe relationship between these performance with schools, gender and socioeconomic status of the students"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Creating data visualisation beyond default",
    "section": "",
    "text": "This is the take home exercise 1 of ISSS608 Visual Analytics and Applications. In this exercise, we are instructed to analyze a survey data to understand:\n\nthe distribution of Singapore students’ performance in mathematics, reading and science\nthe relationship between these performance with schools, gender and socioeconomic status of the students\n\nDespite the continuous effort from Ministry of Education in Singapore to promote the concept of “Every school a good school”, and all the student should be treated the same regardless of their background. People are still not convinced that the neighborhood schools are comparable with the elite schools.\nTherefore, we’d use the survey data from 2022 Programme for International Student Assessment (PISA) to get some insights into what differentiate the students’ academic performance.\n\n\n\nPISA is a programme from Organization for Economic Co-operation and Development (OECD). It measures 15-year-olds’ ability to use their reading, mathematics and science knowledge and skills to meet real-life challenges, and it’s conducted every three years. The last assessment was conducted in 2022, and the data was made publicly available on PISA’s website.\nIn this exercise, we’d focus on the Student Questionnaire data, and analyze the responses from the participants from Singapore. The full questionnaire could be found with this link.\n\n\n\nAnalyze the responses from Singapore participants, and understand:\n\nthe distribution of Singapore students’ performance in mathematics, reading and science\nthe relationship between these performance with schools, gender and socioeconomic status of the students"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#understanding-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#understanding-the-data",
    "title": "Creating data visualisation beyond default",
    "section": "2. Understanding the Data",
    "text": "2. Understanding the Data\n\n2.1 Installing and loading the required libraries\nIn this exercise, we’ll make use the following R packages:\n\ntidyverse: an opinionated collection of R packages designed for data import, data wrangling and data exploration\nhaven: to import data in SPSS, Stata and SAS data format\npatchwork: specially designed for combining separate ggplot2 graphs into a single figure\nggdist: to visualize distribution and uncertainty\nheatmaply: to build interactive heatmap\nggstatsplot: an extension of ggplot2 for creating graphics with detials from statistical tests included in the information-rich plots themselves\n\nLet’s use the code chunk below to load the required R packages.\n\npacman::p_load(tidyverse, haven, patchwork, ggdist, heatmaply, ggstatsplot)\n\n\n\n2.2 Importing the data\nPISA provides the survey data in two formats, SPSS and SAS. In this exercise, we’ve downloaded the data in SAS data format (.sas7bdat).\nThe code chunk below uses read_sas() function of haven package to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"../../Data/cy08msp_stu_qqq.sas7bdat\")\n\nThe dataset contains 1,279 variables, and 613,744 records from respondents all over the world. However, we are only interested in the responses from the participants from Singapore. Therefore, we use the code chunk below to filter the data using CNT (country code) variable.\n\nstu_qqq_sg &lt;- stu_qqq %&gt;% \n  filter(CNT == \"SGP\")\n\nNow, the filtered data only contains 6,606 records from Singapore, and the number of variables remains at 1,279.\nThe code chunk below is used to save the filtered data in rds format which is easier to be used in R environment.\n\nwrite_rds(stu_qqq_sg, \"../../Data/stu_qqq_sg.rds\")\n\nNext, we use the code chunk below to import the rds data for the subsequent analyses.\n\nstu_qqq_sg &lt;- read_rds(\"../../Data/stu_qqq_sg.rds\")\n\n\n\n2.3 Understanding the data\n\n2.3.1 Students’ performance\nIn PISA data, students’ performance was estimated through a set of plausible values. Starting from 2015, PISA provides 10 plausible values for each subject (mathematics, reading and science) instead of 5 in the earlier years. To understand more about plausible values, you may refer to Chapter 6 of PISA Data Analysis Manual.\nBelow lists the 10 plausible variables for each subject:\n\nmathematics: PV1MATH, …, PV10MATH\nreading: PV1READ, …, PV10READ\nscience: PV1SCIE, …, PV10SCIE\n\nThere have been discussions about how to estimate the students’ performance using the plausible values. Although PISA Data Analysis Manual has provided a logic to create estimates, it also mentioned that the imputation error is relatively small with one plausible value if the sample size is large.\nAccording to the table provided in the manual, the imputation error reduces as the sample size grows. The imputation error is 0.23 with a sample size being 6,400.\n\n\n\nsource: PISA Data Analysis Manual\n\n\nSince our Singapore dataset has 6,606 data records, we’ll use the first plausible value of each subject to estimate the students’ proficiency. Hence, the variables that will be used as an estimate of the students’ performance are:\n\nmathematics: PV1MATH\nreading: PV1READ\nscience: PV1SCIE\n\nThe code chunk below provides the summary statistics of the chosen plausible values.\n\nstu_qqq_sg %&gt;%\n  select(PV1MATH, PV1READ, PV1SCIE) %&gt;%\n  summary()\n\n    PV1MATH         PV1READ         PV1SCIE     \n Min.   :218.6   Min.   :135.9   Min.   :187.5  \n 1st Qu.:503.1   1st Qu.:476.9   1st Qu.:495.7  \n Median :582.5   Median :552.9   Median :568.7  \n Mean   :574.2   Mean   :544.4   Mean   :560.8  \n 3rd Qu.:648.2   3rd Qu.:619.6   3rd Qu.:631.1  \n Max.   :943.0   Max.   :859.5   Max.   :873.3  \n\n\n\n\n2.3.2 Students’ school\nPISA data provides a variable called CNTSCHID to indicate the school that the students are from.\nThe code chunk below displays the frequency of each school ID in the variable CNTSCHID.\n\n# Count number of distinct values in School ID variable\nn_distinct(stu_qqq_sg$CNTSCHID)\n\n[1] 164\n\n# Count the number of respondents from each school\ntable(stu_qqq_sg$CNTSCHID)\n\n\n70200001 70200002 70200003 70200004 70200005 70200006 70200007 70200008 \n      55       38       36       56       38       36       38       38 \n70200009 70200010 70200011 70200012 70200013 70200014 70200015 70200016 \n      36       36       56       57       58       36       34       37 \n70200017 70200018 70200019 70200020 70200021 70200022 70200023 70200024 \n      39       52       39       60       37       37       35       36 \n70200025 70200026 70200027 70200028 70200029 70200030 70200031 70200032 \n      38       56       54       22       39       30       56       37 \n70200033 70200034 70200035 70200036 70200037 70200038 70200039 70200040 \n      33       36       56       38       36       40       37       57 \n70200041 70200042 70200043 70200044 70200045 70200046 70200047 70200048 \n       5       37       54       55       58       37       37       36 \n70200049 70200050 70200051 70200052 70200053 70200054 70200055 70200056 \n      56       30       36       55       39       36       35       33 \n70200057 70200058 70200059 70200060 70200061 70200062 70200063 70200064 \n      28       36       39       29       39       57       39       38 \n70200065 70200066 70200067 70200068 70200069 70200070 70200071 70200072 \n      39       58       56       39       33       36       56       34 \n70200073 70200074 70200075 70200076 70200077 70200078 70200079 70200080 \n      38       37       60       37       35       22       31       37 \n70200081 70200082 70200083 70200084 70200085 70200086 70200087 70200088 \n      36       56       36       39       37       37       37       36 \n70200089 70200090 70200091 70200092 70200093 70200094 70200095 70200096 \n      36       40       35       38       38       56       28       36 \n70200097 70200098 70200099 70200100 70200101 70200102 70200103 70200104 \n      35       34       36       34       35       36       36       39 \n70200105 70200106 70200107 70200108 70200109 70200110 70200111 70200112 \n      57       39       35       37       36       57       55       40 \n70200113 70200114 70200115 70200116 70200117 70200118 70200119 70200120 \n      34       51       33       38       37       57       54       37 \n70200121 70200122 70200123 70200124 70200125 70200126 70200127 70200128 \n      37       36       32       32       36       38       37       40 \n70200129 70200130 70200131 70200132 70200133 70200134 70200135 70200136 \n      36       56       39       57       35       38       37       37 \n70200137 70200138 70200139 70200140 70200141 70200142 70200143 70200144 \n      39       15       54       38       58       55       36       37 \n70200145 70200146 70200147 70200148 70200149 70200151 70200152 70200153 \n      55       38       30       31       28       40       38       37 \n70200154 70200155 70200156 70200157 70200158 70200159 70200160 70200161 \n      35       55       37       34       29       59       36       36 \n70200162 70200163 70200164 70200165 \n      40       37       37       39 \n\n\nThere are a total of 164 schools participated in 2022 assessment, and they are represented by a unique school ID. However, I couldn’t find the data dictionary of school ID in PISA’s website. Hence, we’re unable to identify the schools for more in-depth analysis. For example, understand the differences in students’ performance from elite schools and neighborhood schools.\n\n\n2.3.3 Students’ gender\nThe students’ gender is provided in the variable called ST004D01T, where 1 represent females and 2 represent males.\nThe code chunk below displays the frequency of female students and male students.\n\n# frequency\ntable(stu_qqq_sg$ST004D01T)\n\n\n   1    2 \n3248 3358 \n\n# proportion\ntable(stu_qqq_sg$ST004D01T) %&gt;% prop.table() %&gt;% round(2)\n\n\n   1    2 \n0.49 0.51 \n\n\nThere are 3,248 female students which accounts for 49% of the total sample size, and 3,358 male students which accounts for 51% of the total sample size.\n\n\n2.3.4 Students’ socioeconomic status\nThe students’ socioeconomic status in PISA data is represented by an index of economic, social and cultural status (ESCS). It’s a composite score derived from a few aspects of the students’ family background\n\nparents’ highest education\nparents’ highest occupational status\nhome possessions\n\nThe code chunk below shows the summary statistics of the variable ESCS:\n\nstu_qqq_sg %&gt;%\n  select(ESCS) %&gt;%\n  summary()\n\n      ESCS        \n Min.   :-3.5488  \n 1st Qu.:-0.2327  \n Median : 0.4817  \n Mean   : 0.2904  \n 3rd Qu.: 0.9036  \n Max.   : 3.2780  \n NA's   :47"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "title": "Creating data visualisation beyond default",
    "section": "3. Exploratory Data Analysis",
    "text": "3. Exploratory Data Analysis\nIn this section, we’ll use visual graphics to understand the distribution of the students’ performance in mathematics, reading and science. We are also going to explore if there is any differences among schools, gender and socioeconomic status.\n\n3.1 Overall distribution\nThe code chunk below plots the distribution of the plausible values of mathematics, reading and science.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n# Calculate mean, max and min of the plausible values for mathematics\nmaths_mean &lt;- mean(stu_qqq_sg$PV1MATH)\nmaths_min &lt;- min(stu_qqq_sg$PV1MATH)\nmaths_max &lt;- max(stu_qqq_sg$PV1MATH)\n\n# Plot the histogram of mathematics, and assign it to a variable\nhist_maths &lt;- ggplot(data = stu_qqq_sg,\n             aes(x = PV1MATH)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"chartreuse3\",\n                 fill = \"lightgreen\") +\n  geom_vline(aes(xintercept = maths_mean),\n             color = \"darkgreen\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = maths_min),\n             color = \"darkgreen\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = maths_max),\n             color = \"darkgreen\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = maths_mean, y = 1100,label = paste(\"Mean=\", round(maths_mean, 1)), size = 3, color = \"darkgreen\") +\n  annotate(\"text\", x = maths_min, y = 1000,label = paste(\"Min=\", round(maths_min, 1)), size = 3, color = \"darkgreen\") +\n  annotate(\"text\", x = maths_max - 50, y = 1000,label = paste(\"Max=\", round(maths_max, 1)), size = 3, color = \"darkgreen\") +\n  coord_cartesian(xlim = c(0, 1100),\n                  ylim = c(0, 1100)) +\n  ggtitle(\"Mathematics\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8))\n  \n# Calculate mean, max and min of the plausible values for reading\nread_mean &lt;- mean(stu_qqq_sg$PV1READ)\nread_min &lt;- min(stu_qqq_sg$PV1READ)\nread_max &lt;- max(stu_qqq_sg$PV1READ)\n\n# Plot the histogram of reading, and assign it to a variable\nhist_read &lt;- ggplot(data = stu_qqq_sg,\n             aes(x = PV1READ)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"blue\",\n                 fill = \"lightblue\") +\n  geom_vline(aes(xintercept = read_mean),\n             color = \"darkblue\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = read_min),\n             color = \"darkblue\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = read_max),\n             color = \"darkblue\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = read_mean, y = 1100,label = paste(\"Mean=\", round(read_mean, 1)), size = 3, color = \"darkblue\") +\n  annotate(\"text\", x = read_min + 50, y = 1000,label = paste(\"Min=\", round(read_min, 1)), size = 3, color = \"darkblue\") +\n  annotate(\"text\", x = read_max - 50, y = 1000,label = paste(\"Max=\", round(read_max, 1)), size = 3, color = \"darkblue\") +\n  coord_cartesian(xlim = c(0, 1100),\n                  ylim = c(0, 1100)) +\n  ggtitle(\"Reading\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8))\n\n# Calculate mean, max and min of the plausible values for science\nscience_mean &lt;- mean(stu_qqq_sg$PV1SCIE)\nscience_min &lt;- min(stu_qqq_sg$PV1SCIE)\nscience_max &lt;- max(stu_qqq_sg$PV1SCIE)\n\n# Plot the histogram of science, and assign it to a variable\nhist_science &lt;- ggplot(data = stu_qqq_sg,\n             aes(x = PV1SCIE)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"red\",\n                 fill = \"pink\") +\n  geom_vline(aes(xintercept = science_mean),\n             color = \"darkred\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = science_min),\n             color = \"darkred\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = science_max),\n             color = \"darkred\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = science_mean, y = 1100,label = paste(\"Mean=\", round(science_mean, 1)), size = 3, color = \"darkred\") +\n  annotate(\"text\", x = science_min + 50, y = 1000,label = paste(\"Min=\", round(science_min, 1)), size = 3, color = \"darkred\") +\n  annotate(\"text\", x = science_max - 50, y = 1000,label = paste(\"Max=\", round(science_max, 1)), size = 3, color = \"darkred\") +\n  coord_cartesian(xlim = c(0, 1100),\n                  ylim = c(0, 1100)) +\n  ggtitle(\"Science\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8))\n\nhist_maths + hist_read + hist_science +\n  plot_annotation(\"Distribution of Plausible Values for Each Subject\",\n                  theme = theme(plot.title = element_text(hjust = 0.5)))\n\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nThe plausible values of mathematics, reading and science all follow normal distribution. The students in Singapore performed the best in mathematics, with a mean plausible value of 574.2. The mean plausible value for science is 560.8, and reading registered the lowest plausible value with a mean being 544.4.\nThe results are inline with the common perception of Singapore’s education where students are good at mathematics and science subjects. A similar result was also obtained in a 2019 study of Trends in International Mathematics and Science Study (TIMSS), according to a press release from Ministry of Education Singapore.\n\n\n\n\n3.2 Differences between female students and male students\nNext, let’s compare the plausible values between female students and male students.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n# Recode Gender variable to a new string variable\nstu_qqq_sg &lt;- stu_qqq_sg %&gt;% \n  mutate(Gender = case_when(ST004D01T == 1 ~ 'Female',\n                            ST004D01T == 2 ~ 'Male'))\n\n# Raincloud plot of mathematics, and assign it to a variable\nrain_maths &lt;- ggplot(stu_qqq_sg,\n       aes(x = Gender,\n           y = PV1MATH)) +\n  stat_halfeye(position = \"dodge\",\n               width = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               slab_color = \"chartreuse3\",\n               slab_fill = \"lightgreen\") +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA,\n               color = \"darkgreen\") +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = 0.5,\n            dotsize = 6,\n            color = \"darkgreen\") +\n  geom_hline(aes(yintercept = maths_mean),\n             color = \"darkgreen\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = 0, y = maths_mean,label = paste(\"Overall Mean\"), size = 3, color = \"darkgreen\") +\n  coord_flip() +\n  ggtitle(\"Mathematics\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8),\n        legend.key = element_blank())\n\nrain_read &lt;- ggplot(stu_qqq_sg,\n       aes(x = Gender,\n           y = PV1READ)) +\n  stat_halfeye(position = \"dodge\",\n               width = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               slab_color = \"blue\",\n               slab_fill = \"lightblue\") +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA,\n               color = \"darkblue\") +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = 0.5,\n            dotsize = 6,\n            color = \"darkblue\") +\n  geom_hline(aes(yintercept = read_mean),\n             color = \"darkblue\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = 0, y = read_mean,label = paste(\"Overall Mean\"), size = 3, color = \"darkblue\") +\n  coord_flip() +\n  ggtitle(\"Reading\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nrain_science &lt;- ggplot(stu_qqq_sg,\n       aes(x = Gender,\n           y = PV1SCIE)) +\n  stat_halfeye(position = \"dodge\",\n               width = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               slab_color = \"red\",\n               slab_fill = \"pink\") +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA,\n               color = \"darkred\") +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = 0.5,\n            dotsize = 6,\n            color = \"darkred\") +\n  geom_hline(aes(yintercept = science_mean),\n             color = \"darkred\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = 0, y = science_mean,label = paste(\"Overall Mean\"), size = 3, color = \"darkred\") +\n  coord_flip() +\n  ggtitle(\"Science\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nrain_maths + rain_read + rain_science +\n  plot_annotation(\"Distribution of Plausible Values for Each Subject by Gender\",\n                  theme = theme(plot.title = element_text(hjust = 0.5)))\n\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nIn general, female students and male students perform similarly in all the three subjects. However, there are still slight difference.\nFemale students did better in reading, while male students did slightly better in mathematics and science. A previous study (Halpern, D.F., Benbow, C.P., etc. 2007) discussed that the differences in the performance between female students and male students in mathematics and science could be indirectly related to the differences in interests and specific brain and cognitive systems.\n\n\n\n\n3.3 Differences among schools\nNext, let’s compare the students performance among different schools. Since there are 164 schools participated in PISA 2022 assessment and there isn’t any information to identify which schools they are, we are unable to group them in any ways but have to compare the mean performance by individual schools.\nIn view of the large number of schools, I’ll use a heat map to see if there is any differences in performance across schools for each subject.\nThe code chunk below prepares the data for plotting the heat map.\n\n# Create a dataframe with the means by each school\nstu_qqq_sg_heat &lt;- stu_qqq_sg %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarise_at(vars(PV1MATH, PV1READ, PV1SCIE),\n               funs(mean(.,na.rm = TRUE)))\n\n# Create a new variable for simplified School ID for ease of calculation and display later\nstu_qqq_sg_heat$SCHID_3D &lt;- stu_qqq_sg_heat$CNTSCHID - 70200000\n\n# Change the row names to simplified school ID\nrow.names(stu_qqq_sg_heat) &lt;- stu_qqq_sg_heat$SCHID_3D\n\n# Only keep the variables that are needed for the heat map\nstu_qqq_sg_heat &lt;- stu_qqq_sg_heat %&gt;%\n  dplyr::select(-CNTSCHID, -SCHID_3D)\n\n# Convert the dataframe into a matrix\nstu_qqq_sg_heat_matrix &lt;- data.matrix(stu_qqq_sg_heat)\n\nLet’s now create the heat map.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nheatmaply(stu_qqq_sg_heat_matrix,\n          dendrogram = \"none\",\n          xlab = \"School ID\",\n          ylab = \"Plausible Values\",\n          main = \"Difference in Performance across Schools\",\n          grid_color = \"white\",\n          grid_width = 0.00001,\n          label_names = c(\"School ID: \", \"Subject: \", \"Value\"),\n          fontsize_row = 5,\n          fontsize_col = 5)\n\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nThe heat map above shows that there are indeed differences in schools.\nSome schools performed equally badly among all the three subjects, such as School ID 149 (mathematics: 392.8, reading: 328.2, science: 378.7) and School ID 115 (mathematics: 410.5, reading: 390.1, science: 397.7).\nOn the other hand, there are schools performed well in all the three subjects. For example, School ID 154 (mathematics: 689.1, reading: 680.3, science: 678.0) and School ID 62 (mathematics: 690.2, reading: 676.1, science: 666.3).\nNevertheless, most of the schools performed better in mathematics and science than reading in general.\n\n\n\n\n3.4 Differences among socioeconomic status\nNext, let’s take a look at the relationship between the students’ performance and their families’ socioeconomic status.\nThe code chunk below plots the scatter plots between the plausible values and ESCS index.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n# Create scatter plot between mathematics and socioeconomic status\nscatter_maths &lt;- ggscatterstats(data = stu_qqq_sg,\n               x = ESCS,\n               y = PV1MATH,\n               marginal = FALSE,\n               point.args = list(size = 0.5, \n                                 alpha = 0.4, \n                                 color = \"chartreuse3\"),\n               smooth.line.args = list(linewidth = 0.5, \n                                       color = \"gray15\", \n                                       method = \"lm\", \n                                       formula = y ~ x),\n               title = \"Correlation between Mathematics Performance and Socioeconomic Status\") +\n  ggplot2::coord_cartesian(xlim = c(-4, 4),\n                           ylim = c(100, 1000))\n\n# Create scatter plot between reading and socioeconomic status\nscatter_reading &lt;- ggscatterstats(data = stu_qqq_sg,\n               x = ESCS,\n               y = PV1READ,\n               marginal = FALSE,\n               point.args = list(size = 0.5, \n                                 alpha = 0.4, \n                                 color = \"blue\"),\n               smooth.line.args = list(linewidth = 0.5, \n                                       color = \"gray15\", \n                                       method = \"lm\", \n                                       formula = y ~ x),\n               title = \"Correlation between Reading Performance and Socioeconomic Status\") +\n  ggplot2::coord_cartesian(xlim = c(-4, 4),\n                           ylim = c(100, 1000))\n\n# Create scatter plot between science and socioeconomic status\nscatter_science &lt;- ggscatterstats(data = stu_qqq_sg,\n               x = ESCS,\n               y = PV1SCIE,\n               marginal = FALSE,\n               point.args = list(size = 0.5, \n                                 alpha = 0.4, \n                                 color = \"red\"),\n               smooth.line.args = list(linewidth = 0.5, \n                                       color = \"gray15\", \n                                       method = \"lm\", \n                                       formula = y ~ x),\n               title = \"Correlation between Science Performance and Socioeconomic Status\") +\n  ggplot2::coord_cartesian(xlim = c(-4, 4),\n                           ylim = c(100, 1000))\n\nscatter_maths / scatter_reading / scatter_science\n\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nThe scatter plot above shows that all the three subjects display marginal positive correlation with the students’ families’ socioeconomic status. The pearson R^2 stays around 0.41 to 0.42 for all the three subjects.\nSince the socioeconomic status is represented by ESCS index which is derived from the parents’ highest education, the parents’ highest occupational status and their home possessions, it suggests the financial stability and the well-being of the families.\nThe students from families with higher ESCS index are more likely to receive high quality of education from their parents which would shape their study behaviors and interests. Their parents can also afford high quality tuition for them, such 1-on-1 home tuition for all the subjects."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "title": "Creating data visualisation beyond default",
    "section": "4. Summary",
    "text": "4. Summary\n\n4.1 Limitation\nAlthough there are some interesting findings by exploring the differences between the students’ performance in mathematics, reading and science with regards to their gender, school and socioeconomic status, there are some limitations in this take-home exercise.\n\nMost of the insights in the earlier sections are drawn based on the visual graphics. Due to the time constraints, statistical tests are not conducted except the last section on the correlation studies. Therefore, the findings can’t be backed by the statistical evidence. If time allows, I’ll perform statistical tests to validate if those differences discussed are really significant.\nIt’s a pity that PISA didn’t provide a code book to identify the schools. They did that probably to protect the anonymity of the schools. However, this restricts our analysis to understand further about the performance in different types of schools. Although there is a variable to tell if the school is public or private, most of the schools in Singapore are public which makes this variable less useful in Singapore’s context.\n\n\n\n4.2 Conclusion\nThrough the visual checks discussed in this take-home exercise, there are indeed some interesting findings:\n\nThe students in Singapore generally performed better in mathematics and science than reading.\nThe students from different genders excelled in different subjects. Female students outperformed male students in reading, whereas male students generally do better in mathematics and science. This is probably due to their interests and brain systems.\nThere are differences in the academic performance among schools. Some schools are weak in all the three subjects, and some are strong in all the three subjects. Hence, there is still a long way to go before we actually achieve “Every school a good school” in Singapore.\nSocioeconomic status does have some impact on the students’ academic performance. Although the correlation is moderate, but the students from families with higher socioeconomic status generally achieve better results than those from families with lower socioeconomic status. This is probably due to the educational resources and the study environment that the parents could provide to their children.\n\nThis comes to the end of my take-home exercise 1. Hope you enjoyed reading my explorations and findings. See you in the next take-home exercise 🥰"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#reference",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#reference",
    "title": "Creating data visualisation beyond default",
    "section": "5. Reference",
    "text": "5. Reference\nHalpern, D.F., Benbow, C.P., Geary, D.C., Gur, R.C., Hyde, J.S., & Gernsbacher, M.A. (2007). The Science of Sex Differences in Science and Mathematics. Psychological Science in the Public Interest, 8(1), 1-51. https://doi.org/10.1111/j.1529-1006.2007.00032.x"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In this in-class exercise, two R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In this in-class exercise, two R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"../../Data/cy08msp_stu_qqq.sas7bdat\")\n\nThe dataset contains 1279 variables, and 613744 records from respondents all over the world. However, we are only interested in the responses from the respondents from Singapore. Therefore, we use the code chunk below to filter the data using CNT (country code) variable.\n\nstu_qqq_sg &lt;- stu_qqq %&gt;% \n  filter(CNT == \"SGP\")\n\nNow, the filtered data only contains 6606 records from Singapore, and the number of variables remains at 1279.\nThe code chunk below is used to save the filtered data in rds format.\n\nwrite_rds(stu_qqq_sg, \"../../Data/stu_qqq_sg.rds\")\n\nThe code chunk below is used to import the rds data.\n\nstu_qqq_sg &lt;- read_rds(\"../../Data/stu_qqq_sg.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we will learn to create more elegant and effective statistical graphics using ggplot2 extensions. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package\ncreate professional publication quality figures by using functions provided in ggthemes and hrbrthemes packages\nplot composite figure by combining ggplot2 graphs using pachwork package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#learning-outcome",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we will learn to create more elegant and effective statistical graphics using ggplot2 extensions. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package\ncreate professional publication quality figures by using functions provided in ggthemes and hrbrthemes packages\nplot composite figure by combining ggplot2 graphs using pachwork package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\n2.1 Installing and loading the required libraries\nIn this exercise, other than tidyverse, we’ll learn to use a few new R packages:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels\nggthemes: an R package provides some extra themes, geoms, and scales for ggplot2\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2\npatchwork: an R package for preparing composite figure created using ggplot2\n\nNow, let’s start the exercise by installing these packages\n\npacman::p_load(tidyverse, ggrepel, ggthemes, hrbrthemes, patchwork)\n\n\n\n2.2 Importing the data\nWe’ll continue to use Exam_data throughout this exercise. To recap, this data set contains year end examination grades of a cohort of primary 3 students from a local school. The data file is in csv format.\nLet’s import the data by using read_csv() function of readr package.\n\nexam_data &lt;- read_csv(\"../../Data/Exam_data.csv\")\n\nThe data set consists of 322 rows, and 7 variables.\n\n4 categorical variables: ID, CLASS, GENDER, RACE\n3 numerical variables: ENGLISH, MATHS, SCIENCE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "3. Beyond ggplot2 Annotation: ggrepel",
    "text": "3. Beyond ggplot2 Annotation: ggrepel\nAnnotation is a common challenge we face while plotting statistical graphs, especial for the data with large number of data points. For example, let’s take a look at the graph below:\n\n\n\n\n\nIn the plot, we want to label the data points with the student ID so it’s easy for data interpretation. However, the labels are clustered together due to the large number of data points in the graph. The student ID becomes non-identifiable in this case.\nWith the help of ggrepel package, we are able to repel the overlapping text labels. What we need to do are:\n\nreplace geom_text() with geom_text_repel()\nreplace geom_label() with geom_label_repel()\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs. Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "4. Beyond ggplot2 Themes",
    "text": "4. Beyond ggplot2 Themes\nIn addition to the data labels, we can also customize the theme of a ggplot. ggplot2 provides 8 built-in themes for us to choose from. The graph below illustrates the 8 built-in themes.\n\n\n\nsource: https://ggplot2.tidyverse.org/reference/ggtheme.html\n\n\nLet’s now plot the histogram of Maths scores with theme_gray().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"gray25\",\n                 fill = \"gray90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n4.1 Working with ggtheme package\nIn addition to the default themes provided in ggplot2, we are also able to choose more themes from ggthemes package.\nThe graph below shows the examples of the themes available in ggthemes package.\n\n\n\n\nsource: https://statisticsglobe.com/ggthemes-package-r\n\n\nLet’s now plot the histogram of Maths scores using theme_economist().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"gray25\",\n                 fill = \"gray90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n4.2 Working with hrbrthemes package\nWe have learned how to change the themes of the plot in the previous section, hrbrthemes package in R allows us to make further customization in the plots.\nMore themes:\n\nScales (that align with various themes):\n\nPalettes/Named Colors:\n\nFonts:\n\nMore information of each function can be found in this link.\nNext let’s plot the histogram of Maths scores using theme_ipsum().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"gray25\",\n                 fill = \"gray90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nhrbrthemes package also allows us to edit other aspects of the plot to make it more visually appealing. For example,\n\naxis_title_size: an argument to change the font size of the axis title\nbase_size: an argument to font size of the axis label\ngrid: an argument to turn on X/Y gridlines\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"gray25\",\n                 fill = \"gray90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "5. Beyond Single Graph",
    "text": "5. Beyond Single Graph\nWe have learned how to plot single graph using ggplot2, but we sometimes need to arrange the graphs in a way to tell a more complete story. For example, it’s easier to make comparisons between two graphs if they are arranged side-by-side.\nFortunately, there are a few ggplot2 extensions that can help us acheive this.\nTo do that, let’s first create the individual graphs and assign them to a variable. Then we will use the ggplot2 extensions to compose them in different ways.\nGraph1: let’s plot the histogram of Maths scores, and assign it to a variable called P1.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nP1 &lt;- ggplot(data = exam_data,\n             aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"gray25\",\n                 fill = \"gray90\") +\n  coord_cartesian(xlim = c(0, 100))\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nGraph2: let’s plot the histogram of English scores, and assign it to a variable called P2.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nP2 &lt;- ggplot(data = exam_data,\n             aes(x = ENGLISH)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"gray25\",\n                 fill = \"gray90\") +\n  coord_cartesian(xlim = c(0, 100))\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nGraph3: let’s plot a scatterplot for English scores vs. Maths scores, and assign it to a variable called P3.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nP3 &lt;- ggplot(data = exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))\n  ggtitle(\"English scores vs. Maths scores for Primary 3\")\n\n\n\n\n\n5.1 Creating Composite Graphics: pathwork methods\nThere are 3 popular functions enable the users to create composite figures by combining several graphs:\n\ngrid.arrange() from gridExtra package\nplot_grid() from cowplot package\npatchwork: specially designed for combining separate ggplot2 graphs into a single figure\n\nIn this exercise, we’ll focus on patchwork package. The syntax is rather simple to deploy:\n\nUse “+” to arrange the graphs in two columns\nUse “()” to create a subplot group\nUse “/” to arrange the graphs in two rows\nUse “|” to stack two ggplot2 graphs\n\nLet’s now take a look at some examples.\n\n\n5.2 Combining two ggplot2 graphs\nLet’s now arrange the two histograms (P1 & P2) we created earlier in two columns\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nP1 + P2\n\n\n\n\n\n\n5.3 Combining three ggplot2 graphs\nLet’s now arrange the two histograms (P1 & P2) in two rows, and put the scatterplot (P3) to the right of them.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n(P1 / P2) | P3\n\n\n\n\n\n\n5.4 Creating a composite figure with tag\nWe can also tag the graphs using the auto-tagging capability in patchwork.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n((P1 / P2) | P3) +\n  plot_annotation(tag_levels = \"I\")\n\n\n\n\n\n\n5.5 Creating figure with insert\npatchwork also allows us to put the plots next to each other based on the provided layout using inset_element() function.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nP3 + inset_element(P2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\n5.6 Creating a composite figure by using patchwork and ggtheme\nLastly, let’s integrate patchwork package with ggthemes package to create the following graph.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (P1 / P2) | P3\npatchwork & theme_economist()\n\n\n\n\nThis comes to the end of this hands-on exercise. I have learned many different methods to customize the plots. Hope you enjoyed it, too!\nSee you in the next hands-on exercise 🥰"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics.\nAt the end of this chapter, we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics.\nAt the end of this chapter, we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\n2.1 Installing and loading the required libraries\nLet’s first install the required packages for this hands-on exercise.\n\npacman::p_load(tidyverse)\n\n\n\n2.2 Importing the data\nThe data that would be used for this hands-on exercise is called “Exam_data”, which contains the year end examination grades of a cohort of primary 3 students from a local school.\nLet’s import the data using read_csv() function.\n\nexam_data &lt;- read_csv(\"../../Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe data contains 7 variables. 4 of them are categorical variables, and 3 of them are numerical variables.\n\nCategorical variables: ID, CLASS, GENDER, RACE\nNumerical variables: MATHS, ENGLISH, SCIENCE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3 Introducing ggplot",
    "text": "3 Introducing ggplot\n\n3.1 Compare G Graphics against ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nAlthough the syntax for G Graphics is simpler, ggplot2 is more popular because it’s more flexible in customizing the plots. Therefore, it’s more visually appealing to the audience."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "4 Grammar of Graphics",
    "text": "4 Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. There are a total of seven grammers in ggplot2:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "5 Essential Grammatical Elements in ggplot2: data",
    "text": "5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\nggplot() has initialized a ggplot object, but it’s expected to have a blank canvas because we only defined the dataset to be used for the plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nLet’s now add x axis in the plot by using the code chunk below.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\nAs we can see in the plot, an x axis labelled as “MATHS” has been added."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7 Essential Grammatical Elements in ggplot2: geom",
    "text": "7 Essential Grammatical Elements in ggplot2: geom\nNext, we can define the type of plot by using “geom” object. There are a few types of “geom” objects that’s available:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. We can add a geom to a plot using the + operator.\n\n7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nThe y axis doesn’t provide any useful information, so let’s remove it. We’ll also change the binwidth to 2.5\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8 Essential Grammatical Elements in ggplot2: stat",
    "text": "8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\n8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n8.4 Adding a best fit curve on a scatterplot\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot.\n\n10.1 Working with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "11 Essential Grammatical Elements in ggplot2: themes",
    "text": "11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\n\n11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Programming Interactive Data Visualization with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn to create interactive data visualization by using functions provided by ggiraph and plotlyr packages in R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "title": "Programming Interactive Data Visualization with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn to create interactive data visualization by using functions provided by ggiraph and plotlyr packages in R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "title": "Programming Interactive Data Visualization with R",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\n2.1 Installing and loading the required libraries\nFirstly, let’s install and load the required packages:\n\ntidyverse: an opinionated collection of R packages designed for data import, data wrangling and data exploration\npatchwork: an R package for preparing composite figure created using ggplot2\nggiraph: to make ggplot graphs interactive\nplotly: to plot interative statistical graphs\nDT: provides an R interface to JavaScript library DataTables that create interactive tables on html page\n\n\npacman::p_load(tidyverse, patchwork, ggiraph, plotly, DT)\n\n\n\n2.2 Importing the data\nSimilar to the previous two hands-on exercise, we’ll still use Exam_data for this exercise. The data file contains year end examination grades of a cohort of primary 3 students from a local school, and it’s in csv format.\nLet’s start by importing the data.\n\nexam_data &lt;- read_csv(\"../../Data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Programming Interactive Data Visualization with R",
    "section": "3. Interactive Data Visualisation - ggiraph methods",
    "text": "3. Interactive Data Visualisation - ggiraph methods\nIn this section, we’ll learn how to make the ggplot graphs interactive. It makes it easier to digest the graphs, especially when we want to use the graphs for story telling.\nThe can be achieved by using ggplot geometries, which has three arguments:\n\nTooltip: a column of data-sets that contains tooltips to be displayed when we mouse over the elements\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked\nData_id: a column of data-sets that contain an id to be associated with elements\n\n\n3.1 Tooltip effect with tooltip aesthetic\n\n3.1.1 Create a graph with ONE tooltip\nIt takes two steps to create an interactive ggplot graph:\n\nStep 1: create a graph using standard ggplot syntax. The only difference is to use the interactive version of ggplot2 geom. According to ggiraph website, almost all ggplot2 elements can be made interactive. Some of examples are:\n\ngeom_point_interactive(…)\ngeom_bar_interactive(…)\ngeom_col_interactive(…)\ngeom_tile_interactive(…)\n\n\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID), # to display ID when mouse over the dots in the graph\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\nStep 2: generate an svg object to be displayed on an html page\n\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we put our mouse over an dot on the graph above, the respective student ID will be displayed.\n\n\n\n\n3.1.2 Create a graph with MULTIPLE tooltip\nThe example above only displayed one information, student ID, when we mouse over the dots. We can actually display more information by specifying a list object as shown in the code chunk below.\n\n# Step 1: create a column in exam_data to store the information that we want to display, by concatenating the information from a few columns\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS))\n\n# Step 2: create a standard ggplot2 object\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), # supply the newly created tooltip column to tooltip argument\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Step 3: create an SVG object using girafe() function\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we put our mouse over an dot on the graph above, the respective student ID and their classes will now be displayed.\n\n\n\n\n3.1.3 Customising Tooltip style\nWe can also customize tooltip using opts_tooltip() function by adding css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)  \n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we put our mouse over an dot on the graph above, the tooltip is now displayed with a white background now.\n\n\n\n\n3.1.4 Displaying statistics on tooltip\nWe can also customize the tooltip to display statistical summary information. For example, we can create a function to compute 90% confident interval of the mean, and display it in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = 0.01){\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores: \", mean, \" +/- \", sem)\n}\n\ngg_point &lt;- ggplot(data = exam_data,\n                   aes(x = RACE)) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(\n                     tooltip(y, ymax))), \n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"lightblue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\",\n               width = 0.2,\n               size = 0.2)\n\ngirafe(\n  ggobj = gg_point,\n  width_svg = 8,\n  height_svg = 8 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we put our mouse over a bar, the desired statistics is displayed. In our example above, the mean maths score is displayed with 90% confidence interval.\n\n\n\n\n\n3.2 Hover effect with data_id aesthetic\nIn addition to display the tooltip when we mouse over a data point, we can also highlight a subset of the data points using another feature called data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS,\n        tooltip = ID), # to highlight the data points from the same class when mouse over            \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6 * 0.618                      \n)                                        \n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we mouse over a data point, the other data points which are from the same class are also highlighted.\nNote that the default highlight color is orange, but it can be changed using hover_css = “fill:orange;”\n\n\n\n3.2.1 Styling hover effect\nLet’s now try change the highlighting effect in the graph.\n\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6 * 0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we mouse over a data point, only the data points from the same class are highlighted in black and the rest of the points are dimmed.\n\n\n\n\n3.2.2 Combining tooltip and hover effect\nNow, let’s combine tooltip and data_id features to make the graph more informative.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, # to display class information when hover over\n        data_id = CLASS), # to highlight the data from the same class when hover over             \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6 * 0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity: 0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we mouse over a data point, only the data points from the same class are highlighted in black and the rest of the points are dimmed. At the same time, the class information is displayed as well.\n\n\n\n\n\n3.3 Click effect with onclick\nggiraph also provides a feature to allow us to redirect the user to a webpage when they click on the graph.\nThe code chunk below shows an example.\n\n# Create a column in exam_data to store the website address\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6 * 0.618)                                        \n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we click on a data point, a webpage is opened automatically to look for the school with the respective school ID.\n\n\n\n\n3.4 Coordinated Multiple Views with ggiraph\nWe can also plot coordinated multiple views to highlight the related information regarding the same data point.\n\n# Step 1: create the first interactive graph\np1 &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0, 100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n# Step 2: create the second interactive graph\np2 &lt;- ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0, 100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n# Combine the two graphs using patchwork package\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nWhen we hover over a data point in any of the two graphs, the related data point is also highlighted in the other graph."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Programming Interactive Data Visualization with R",
    "section": "4. Interactive Data Visualisation - plotly methods!",
    "text": "4. Interactive Data Visualisation - plotly methods!\nThere is another package available in R to create interactive graphs, that is plotly package. It can be done in two ways:\n\nusing plot_ly()\nusing ggplotly()\n\n\n4.1 Creating an interactive scatter plot: plot_ly() method\nThe code chunk below shows an example.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n4.2 Working with visual variable: plot_ly() method\nWe can add another dimension to the plot by coloring the data points base on a categorical variable, for example, RACE.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nThe color did not just provide another piece of information, it can also act as filters to the plot. The data points are filtered when we click on the categories in the legend.\n\n\n\n\n4.3 Creating an interactive scatter plot: ggplotly() method\nLet’s now create an interactive scatter plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nThe coordinates are now displayed when we hover over a data point.\n\n\n\n\n4.4 Coordinated Multiple Views with plotly\nSimilar to ggiraph package, we can also create coordinated multiple views using plotly package.\n\nhighlight_key() of plotly package is used as shared data\ntwo scatterplots will be created by using ggplot2 functions\nsubplot() of plotly package is used to place them next to each other side-by-side\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))\n\np2 &lt;- ggplot(data = d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Programming Interactive Data Visualization with R",
    "section": "5. Interactive Data Visualisation - crosstalk methods!",
    "text": "5. Interactive Data Visualisation - crosstalk methods!\nLastly, let’s make more interactions in R.\n\n5.1 Interactive Data Table: DT package\nThe data tables can also be interactive with the help of a DataTables wrapper from the JavaScript library.\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out\n\n\n\nUnlike the traditional way of displaying the data tables, there is a search box above the table to allow us type the texts and the table will be filtered accordingly.\n\n\n\n\n5.2 Linked brushing: crosstalk method\nWe can even combine the plot and the data table, and make them interlinked.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \n\np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5) \n\n\n\n\nThis comes to the end of this hands-on exercise. I have learned many different methods to create interactive plots in R. Hope you enjoyed it, too!\nSee you in the next hands-on exercise 🥰"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn to\n\ncreate animated data visualization by using gganimate and plotly R packages\nreshape data using tidyr package\nprocess, wrangle and transform data using dplyr package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#learning-outcome",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn to\n\ncreate animated data visualization by using gganimate and plotly R packages\nreshape data using tidyr package\nprocess, wrangle and transform data using dplyr package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\n2.1 Installing and loading the required libraries\nFirstly, let’s install and load the required packages:\n\ntidyverse: an opinionated collection of R packages designed for data import, data wrangling and data exploration\nplotly: to plot interative statistical graphs\ngganimate: to plot animated visualization\ngifski: to convert images to GIF animations\ngapminder: An excerpt of the data available at Gapminder.org. We’ll use its country_colors scheme.\nreadxl: to read data from excel files\n\n\npacman::p_load(tidyverse, plotly, gganimate, gifski, gapminder, readxl)\n\n\n\n2.2 Importing the data\nIn this hands-on exercise, we’ll use the Data worksheet from GlobalPopulation Excel workbook\nLet’s start by importing the data.\n\ncol &lt;- c(\"Country\", \"Continent\")\n\nglobalPop &lt;- read_xls(\"../../Data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;% # to convert all character data into factor\n  mutate(Year = as.integer(Year)) # to convert Year column into integer\n\n\n\n\n\n\n\nImportant\n\n\n\nNote that mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. Therefore, we will replace the function with mutate_at() function. Alternatively, across() function can also be used to achieve the same output.\n\n\nExample code using mutate_at() function.\n\ncol &lt;- c(\"Country\", \"Continent\")\n\nglobalPop &lt;- read_xls(\"../../Data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nExample code using across() function.\n\ncol &lt;- c(\"Country\", \"Continent\")\n\nglobalPop &lt;- read_xls(\"../../Data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3. Animated Data Visualisation: gganimate methods",
    "text": "3. Animated Data Visualisation: gganimate methods\nNow, let’s use gganimate methods to create some animated visualizations. The visualizations are generated using the following functions:\n\ntransition_(): defines how the data should be spread out and how it relates to itself across time.\nview_(): defines how the positional scales should change along the animation.\nshadow_(): defines how data from other points in time should be presented in the given point in time.\nenter_()/exit_(): defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes(): defines how different aesthetics should be eased during transitions.\n\n\n3.1 Building a static population bubble plot\nLet’s first create a static bubble plot using ggplot2 method.\n\nggplot(globalPop, aes(x = Old, \n                      y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n3.2 Building the animated bubble plot\nNext, let’s make the bubbles move by using the two functions below:\n\ntransition_time(): to create transition through distinct states in time (i.e. Year).\nease_aes(): to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, \n                      y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "4. Animated Data Visualisation: plotly",
    "text": "4. Animated Data Visualisation: plotly\nNow, let’s make the animated visualization interactive by using ggplotly() method.\n\n4.1 Building an animated bubble plot: ggplotly() method\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\nAlthough we have turned off legend using show.legend = FALSE argument, it stills shows in the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position = 'none')\n\nggplotly(gg)\n\n\n\n\n\n\n4.2 Building an animated bubble plot: plot_ly() method\nAnother way to make animated bubble plot is to use plot_ly() function.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\n\nbp\n\n\n\n\nThis comes to the end of this hands-on exercise. I have learned many different methods to create animated visualizations in R. Hope you enjoyed it, too!\nSee you in the next hands-on exercise 🥰"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Data Vis Makeover",
    "section": "",
    "text": "This is the take home exercise 2 of ISSS608 Visual Analytics and Applications. In this exercise, we are instructed to refer to the take home exercise 1 of one of our fellow classmates, and discuss his / her visualizations in terms of clarity and aesthetics.\n\n\n\nThe discussions in this take home exercise is based on this work."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#setting-the-scene",
    "title": "Data Vis Makeover",
    "section": "",
    "text": "This is the take home exercise 2 of ISSS608 Visual Analytics and Applications. In this exercise, we are instructed to refer to the take home exercise 1 of one of our fellow classmates, and discuss his / her visualizations in terms of clarity and aesthetics.\n\n\n\nThe discussions in this take home exercise is based on this work."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-preparation",
    "title": "Data Vis Makeover",
    "section": "2. Data Preparation",
    "text": "2. Data Preparation\n\n2.1 Installing and loading the required libraries\nThe chunk below is used to install and load the R packages that were used by the original author.\n\npacman::p_load(tidyverse, haven, dplyr, plotly, ggrepel, patchwork, \n               ggthemes, hrbrthemes, jpeg, ggiraph, ggdist)\n\n\n\n2.2 Import the data\nThe data used for our take home exercise 1 is a survey data from PISA, which measures 15-year-olds’ ability to use their reading, mathematics and science knowledge and skills to meet real-life challenges. If you’d like to find out more about the dataset, you may refer to my take home exercise 1.\nLet’s first import the dataset.\n\nstu_qqq_sg &lt;- read_rds(\"../../Data/stu_qqq_sg.rds\")\n\nNext, we’ll follow the code provided by the original author to make a subset of the data, and compute the average plausible values for mathematics, reading and science.\n\n# Create a new dataset PV by extracting relevant variables from stu_qqq_sg\nPV &lt;- stu_qqq_sg %&gt;%\n  mutate(\n    Math_Score = rowMeans(select(., starts_with(\"PV1MATH\"), starts_with(\"PV2MATH\"), starts_with(\"PV3MATH\"), starts_with(\"PV4MATH\"), starts_with(\"PV5MATH\"), starts_with(\"PV6MATH\"), starts_with(\"PV7MATH\"), starts_with(\"PV8MATH\"), starts_with(\"PV9MATH\"), starts_with(\"PV10MATH\")), na.rm = TRUE),\n    Reading_Score = rowMeans(select(., starts_with(\"PV1READ\"), starts_with(\"PV2READ\"), starts_with(\"PV3READ\"), starts_with(\"PV4READ\"), starts_with(\"PV5READ\"), starts_with(\"PV6READ\"), starts_with(\"PV7READ\"), starts_with(\"PV8READ\"), starts_with(\"PV9READ\"), starts_with(\"PV10READ\")), na.rm = TRUE),\n    Science_Score = rowMeans(select(., starts_with(\"PV1SCIE\"), starts_with(\"PV2SCIE\"), starts_with(\"PV3SCIE\"), starts_with(\"PV4SCIE\"), starts_with(\"PV5SCIE\"), starts_with(\"PV6SCIE\"), starts_with(\"PV7SCIE\"), starts_with(\"PV8SCIE\"), starts_with(\"PV9SCIE\"), starts_with(\"PV10SCIE\")), na.rm = TRUE),\n    Total_Score = Math_Score + Reading_Score + Science_Score,\n    Gender = ifelse(ST004D01T == 1,  \"Female\", \"Male\"),\n    Own_Room = ifelse(ST250Q01JA == 1, \"Yes\" , \"No\"),\n    mi_num = ST251Q06JA\n  ) %&gt;%\n  select(CNTSCHID, CNTSTUID, Math_Score, Reading_Score, Science_Score, Total_Score, Gender, Own_Room, mi_num)\n\nAs described by the original author, we use the code chunk below to convert school ID and student ID to string variables. We’ll also clear the missing values in the new dataset.\n\n# Convert numerical variables to string variables\nPV$CNTSCHID &lt;- as.character(PV$CNTSCHID)\nPV$CNTSTUID &lt;- as.character(PV$CNTSTUID)\n\n# Clear missing values\nPV &lt;- na.omit(PV)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualization-discussion-and-remake",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualization-discussion-and-remake",
    "title": "Data Vis Makeover",
    "section": "3. Visualization Discussion and Remake",
    "text": "3. Visualization Discussion and Remake\n\n3.1 Distribution of Student Performance\nOriginal plot\n\nWhat’s good about this plot?\nThe original author chose the right type of graph to view the distribution of the subjects, which is the histograms. It is easy for us to see if the data exhibits any abnormal patterns, for example, skewness or multi-model distribution.\nWhat can be improved?\n\nIt isn’t very obvious to identify the plots for each subject as they are all in the same color. My suggestion is to use different colors to represent different subjects.\nThe scales could be aligned across all the charts so to avoid mis-interpretation when comparing the mean scores among the three subjects.\nDensity curves could be added to show the smoothness of the curves.\nThe plots could be better arranged to show the relationship among individual subjects and the total scores.\n\nA remake of the plot\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score, y = after_stat(density))) +\n  geom_histogram(bins = 10, boundary = 100, color = \"chartreuse3\", fill = \"lightgreen\") +\n  geom_density(lwd = 0.8, colour = \"darkgreen\") +\n  scale_y_continuous(labels = scales::percent) +\n  coord_cartesian(xlim = c(100, 900)) +\n  ggtitle(\"Distribution of Maths Scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n  \nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score, y = after_stat(density))) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"lightblue\") +\n  geom_density(lwd = 0.8, colour = \"darkblue\") +\n  scale_y_continuous(labels = scales::percent) +\n  coord_cartesian(xlim = c(100, 900)) +\n  ggtitle(\"Distribution of Reading Scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score, y = after_stat(density))) +\n  geom_histogram(bins = 10, boundary = 100, color = \"red\", fill = \"pink\") +\n  geom_density(lwd = 0.8, colour = \"darkred\") +\n  scale_y_continuous(labels = scales::percent) +\n  coord_cartesian(xlim = c(100, 900)) +\n  ggtitle(\"Distribution of Science Scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score, y = after_stat(density))) +\n  geom_histogram(bins = 10, boundary = 100, color = \"gray25\", fill = \"gray95\") +\n  geom_density(lwd = 0.8, colour = \"gray10\") +\n  scale_y_continuous(labels = scales::percent) +\n  coord_cartesian(xlim = c(200, 2600)) +\n  ggtitle(\"Distribution of Total Scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n(plot1 / plot2 / plot3) | plot4\n\n\n\n\n\n\n3.2 Student Performance by Gender\nOriginal plot\n\nWhat’s good about this plot?\nWhile comparing the distribution between genders, the author used different colors so it’s easy to differentiate the distributions for female students and male students.\nWhat can be improved?\n\nAlthough there are supposed to be two colors to represent female students and male students, it seems to be three categories when we first look at the graph because a third color is created at the area where the two distributions overlap. I’d suggest to use density curves without filling color.\nSince we need to use different colors to represent different categories, we can’t use colors to differentiate the subjects as we did in the previous section. An alternative way is to display an icon in the plots so the audience can easily identify the subjects.\n\nA remake of the plot\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n# Maths: Plot the density curves by gender with maths image\nimg_maths &lt;- readJPEG(\"images/Maths.jpg\", native = TRUE)\n\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score, color = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\",lwd = 0.8) +  \n  labs(title = \"Math Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent) +\n  coord_cartesian(xlim = c(100, 900)) +\n  theme_minimal() +\n  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))\n\nplot1_img &lt;- plot1 +\n  inset_element(p = img_maths,\n                 left = 0.1,\n                 bottom = 0.7,\n                 right = 0.3,\n                 top = 0.9)\n\n# Reading: Plot the density curves by gender with reading image\nimg_read &lt;- readJPEG(\"images/Reading.jpg\", native = TRUE)\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score, color = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\", lwd = 0.8) +\n  labs(title = \"Reading Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  coord_cartesian(xlim = c(100, 900)) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2_img &lt;- plot2 +\n  inset_element(p = img_read,\n                 left = 0.1,\n                 bottom = 0.7,\n                 right = 0.3,\n                 top = 0.9)\n\n# English: Plot the density curves by gender with English image\nimg_science &lt;- readJPEG(\"images/Science.jpg\", native = TRUE)\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score, color = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\", lwd = 0.8) +\n  labs(title = \"Science Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  coord_cartesian(xlim = c(100, 900)) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3_img &lt;- plot3 +\n  inset_element(p = img_science,\n                 left = 0.1,\n                 bottom = 0.7,\n                 right = 0.3,\n                 top = 0.9)\n\n# Total: Plot the density curves by gender with total image\nimg_total &lt;- readJPEG(\"images/Total.jpg\", native = TRUE)\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score, color = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\", lwd = 0.8) +\n  labs(title = \"Total Scores by Gender\") + \n  scale_y_continuous(labels = scales::percent)+\n  coord_cartesian(xlim = c(200, 2600)) +\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4_img &lt;- plot4 +\n  inset_element(p = img_total,\n                 left = 0.1,\n                 bottom = 0.7,\n                 right = 0.3,\n                 top = 0.9)\n\nplot1_img + plot2_img + plot3_img + plot4_img\n\n\n\n\n\n\n3.3 Student Performance by School\nOriginal plot\n\nWhat’s good about this plot?\nBoxplot is one of the ways to view the distribution of the performance across schools. The author also showed school IDs of the outliers to help identify if any schools performed well or bad for each of the subjects.\nWhat can be improved?\n\nStatic boxplot has its limitations when the audience try to draw a story across different subjects, for example, if there is any schools that performed consistently good or bad across all the subjects.\nI’d also suggest to use different color to represent different subjects for easy identification.\nTherefore, a coordinated interactive graph would allow the audience to easily see the performance of a selected school across subjects. In my makeover below, I’ll choose dot plot to represent the data as it’s easier for me to see the schools’ performance across subjects.\n\nA remake of the plot\nWe’ll first follow the author’s code chunk to calculate the average scores for each school for each subject.\n\nSchool_Avg_Scores &lt;- PV %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math_Score = mean(Math_Score, na.rm = TRUE),\n    Avg_Reading_Score = mean(Reading_Score, na.rm = TRUE),\n    Avg_Science_Score = mean(Science_Score, na.rm = TRUE),\n    Avg_Score = mean(Total_Score/3, na.rm = TRUE)\n  )\n\nSchool_Avg_Scores_subjects &lt;- School_Avg_Scores %&gt;%\n  select(CNTSCHID, starts_with(\"Avg_Math\"), starts_with(\"Avg_Reading\"), starts_with(\"Avg_Science\"),starts_with(\"Avg_Score\"))\n\nSchool_Avg_Scores_long &lt;- School_Avg_Scores_subjects %&gt;%\n  pivot_longer(cols = -CNTSCHID, names_to = \"Subject\", values_to = \"Score\")\n\nNow let’s remake the plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n# Create dot plot for Maths\nSchool_Avg_Scores$tooltip_maths &lt;- c(paste0(\n  \"School ID = \", School_Avg_Scores$CNTSCHID,\n  \"\\n Ave Maths Score = \", School_Avg_Scores$Avg_Math_Score\n))\n\nplot1 &lt;- ggplot(data = School_Avg_Scores,\n            aes(x = Avg_Math_Score)) +\n  geom_dotplot_interactive(\n    aes(data_id = CNTSCHID, tooltip = tooltip_maths), # to display ID when mouse over the dots in the graph\n    stackgroups = TRUE,\n    binwidth = 1,\n    dotsize = 8,\n    color = \"darkgreen\",\n    fill = \"chartreuse3\",\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Create dot plot for Reading\nSchool_Avg_Scores$tooltip_read &lt;- c(paste0(\n  \"School ID = \", School_Avg_Scores$CNTSCHID,\n  \"\\n Ave Maths Score = \", School_Avg_Scores$Avg_Reading_Score\n))\n\nplot2 &lt;- ggplot(data = School_Avg_Scores,\n            aes(x = Avg_Reading_Score)) +\n  geom_dotplot_interactive(\n    aes(data_id = CNTSCHID, tooltip = tooltip_read), # to display ID when mouse over the dots in the graph\n    stackgroups = TRUE,\n    binwidth = 1,\n    dotsize = 8,\n    color = \"blue\",\n    fill = \"lightblue\",\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Create dot plot for Science\nSchool_Avg_Scores$tooltip_science &lt;- c(paste0(\n  \"School ID = \", School_Avg_Scores$CNTSCHID,\n  \"\\n Ave Maths Score = \", School_Avg_Scores$Avg_Science_Score\n))\n\nplot3 &lt;- ggplot(data = School_Avg_Scores,\n            aes(x = Avg_Science_Score)) +\n  geom_dotplot_interactive(\n    aes(data_id = CNTSCHID, tooltip = tooltip_science), # to display ID when mouse over the dots in the graph\n    stackgroups = TRUE,\n    binwidth = 1,\n    dotsize = 8,\n    color = \"red\",\n    fill = \"pink\",\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Combine the three plots\ngirafe(\n  code = print(plot1 + plot2 + plot3),\n  width_svg = 6,\n  height_svg = 3,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )\n)\n\n\n\n\n\n\n3.4 Student Performance by Musical Instruments\nOriginal plot\n\nWhat’s good about this plot?\nThe intention was good where the author explored the correlation between the performance of the three subjects and the number of musical instruments owned. However, I don’t think scatter plot is suitable for this purpose.\nWhat can be improved?\n\nThe number of musical instruments owned are in integer form, where as the scores of the subjects are in continuous form. This leads to the data points are displayed on the vertical line which is hard for any interpretation.\nAlthough the author displayed a best fit line in the graphs to show the trend, it’s hard to correlate the trend line to the dots.\nI’d suggest to use one of the following visualizations to represent the data: boxplot, violin plot, or rain cloud plots.\n\nA remake of the plot\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nPV$mi_num_s &lt;- as.character(PV$mi_num)\n\nplot1 &lt;- ggplot(PV,\n       aes(x = mi_num_s,\n           y = Math_Score)) +\n  xlab(\"Number of Musical Instruments\") +\n  stat_halfeye(position = \"dodge\",\n               width = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               slab_color = \"chartreuse3\",\n               slab_fill = \"lightgreen\") +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA,\n               color = \"darkgreen\") +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)+\n  coord_flip() +\n  ggtitle(\"Math Score by Musical instruments\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nplot2 &lt;- ggplot(PV,\n       aes(x = mi_num_s,\n           y = Reading_Score)) +\n  xlab(\"Number of Musical Instruments\") +\n  stat_halfeye(position = \"dodge\",\n               width = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               slab_color = \"blue\",\n               slab_fill = \"lightblue\") +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA,\n               color = \"darkblue\") +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)+\n  coord_flip() +\n  ggtitle(\"Reading Score by Musical instruments\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nplot3 &lt;- ggplot(PV,\n       aes(x = mi_num_s,\n           y = Science_Score)) +\n  xlab(\"Number of Musical Instruments\") +\n  stat_halfeye(position = \"dodge\",\n               width = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               slab_color = \"red\",\n               slab_fill = \"pink\") +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA,\n               color = \"darkred\") +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)+\n  coord_flip() +\n  ggtitle(\"Science Score by Musical instruments\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nplot4 &lt;- ggplot(PV,\n       aes(x = mi_num_s,\n           y = Total_Score)) +\n  xlab(\"Number of Musical Instruments\") +\n  stat_halfeye(position = \"dodge\",\n               width = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               slab_color = \"gray25\",\n               slab_fill = \"gray95\") +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA,\n               color = \"gray10\") +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)+\n  coord_flip() +\n  ggtitle(\"Total Score by Musical instruments\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nplot1 + plot2 + plot3 + plot4\n\n\n\n\n\n\n3.5 Student Performance by Own Room\nOriginal plot\n\nWhat’s good about this plot?\nBox plot is a good choice to compare if there is any differences in the scores between the students who have their own room and those who share room.\nWhat can be improved?\n\nEverything is in the same color makes it difficult for the audience to differentiate the plots between subjects and categories.\nThe axis values are not synchronized to make cross reference among the subjects.\nSince this is a visualization course, maybe we can try something else.\n\nA remake of the plot\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nplot1 &lt;- ggplot(PV,\n       aes(x = Own_Room,\n           y = Math_Score)) +\n  geom_violin(color = \"chartreuse3\",\n              fill = \"lightgreen\") +\n  geom_boxplot(width = 0.1, \n               color = \"darkgreen\",\n               alpha = 0.2, \n               outlier.shape = NA) +\n  theme_minimal() +\n  ggtitle(\"Math Score by Private Space\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n  \nplot2 &lt;- ggplot(PV,\n       aes(x = Own_Room,\n           y = Reading_Score)) +\n  geom_violin(color = \"blue\",\n              fill = \"lightblue\") +\n  geom_boxplot(width = 0.1, \n               color = \"darkblue\",\n               alpha = 0.2, \n               outlier.shape = NA) +\n  theme_minimal() +\n  ggtitle(\"Reading Score by Private Space\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nplot3 &lt;- ggplot(PV,\n       aes(x = Own_Room,\n           y = Science_Score)) +\n  geom_violin(color = \"red\",\n              fill = \"pink\") +\n  geom_boxplot(width = 0.1, \n               color = \"darkred\",\n               alpha = 0.2, \n               outlier.shape = NA) +\n  theme_minimal() +\n  ggtitle(\"Science Score by Private Space\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nplot4 &lt;- ggplot(PV,\n       aes(x = Own_Room,\n           y = Total_Score)) +\n  geom_violin(color = \"gray25\",\n              fill = \"gray95\") +\n  geom_boxplot(width = 0.1, \n               color = \"gray10\",\n               alpha = 0.2, \n               outlier.shape = NA) +\n  theme_minimal() +\n  ggtitle(\"Total Score by Private Space\") +\n  theme(plot.title = element_text(size = 8, hjust = 0.5),\n        axis.title = element_text(size = 8),\n        axis.text = element_text(size = 8))\n\nplot1 + plot2 + plot3 + plot4\n\n\n\n\nThis comes to the end of my take-home exercise 2. Hope you enjoyed reading my work. See you in the next take-home exercise 🥰"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "Visualizing Distribution",
    "section": "",
    "text": "In this hands-on exercise, we will learn another two new ways to visualize the distribution of the data by using ridgeline plot and raincloud plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "title": "Visualizing Distribution",
    "section": "",
    "text": "In this hands-on exercise, we will learn another two new ways to visualize the distribution of the data by using ridgeline plot and raincloud plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "title": "Visualizing Distribution",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\n2.1 Installing and loading the required libraries\nFirstly, let’s install and load the required packages:\n\ntidyverse: an opinionated collection of R packages designed for data import, data wrangling and data exploration\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\nggdist: to visualise distribution and uncertainty\n\n\npacman::p_load(tidyverse, ggridges, ggdist, ggthemes, colorspace)\n\n\n\n2.2 Importing the data\nSimilar to the previous hands-on exercises, we’ll still use Exam_data for this exercise. The data file contains year end examination grades of a cohort of primary 3 students from a local school, and it’s in csv format.\nLet’s start by importing the data.\n\nexam &lt;- read_csv(\"../../Data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "Visualizing Distribution",
    "section": "3. Visualising Distribution with Ridgeline Plot",
    "text": "3. Visualising Distribution with Ridgeline Plot\nRidgeline plot, also known as Joyplot, is a type of visualization toview the distribution of a numerical value for several groups. The distribution can be arranged on the same horizontal scale for easy comparison.\nBelow is an example to compare the distribution of English scores across classes through ridgeline plot.\n\n\n3.1 Plotting ridgeline graph: ggridges method\nIn this section, we’ll learn to plot ridgeline plot using ggridges package. We’ll mainly use two geoms:\n\ngeom_ridgeline(): takes height values to draw ridgelines\ngeom_density_ridges(): estimates data densities and then draw using ridgelines\n\nLet’s look at an example below:\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n3.2 Varying fill colors along the x axis\nThe R package also enables us to change the color in the ridgeline plots, by using geom_ridgeline_gradient() or geom_density_ridges_gradient().\nLet’s look at an example below:\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = after_stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5 - stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-3",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-3",
    "title": "Visualizing Distribution",
    "section": "The code",
    "text": "The code\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-4",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-4",
    "title": "Visualizing Distribution",
    "section": "The code",
    "text": "The code\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "title": "Visualizing Distribution",
    "section": "4. Visualising Distribution with Raincloud Plot",
    "text": "4. Visualising Distribution with Raincloud Plot\nIn this section, we will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 0.5,\n            dotsize = 2)\n\n\n\n\n\n\n4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 0.5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\nThis comes to the end of this hands-on exercise. I have learned to create ridgeline plots and raincloud plots in R. Hope you enjoyed it, too!\nSee you in the next hands-on exercise 🥰"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-5",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#the-code-5",
    "title": "Visualizing Distribution",
    "section": "The code",
    "text": "The code\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  }
]